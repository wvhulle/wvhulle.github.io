<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Willem Vanhulle</title>
    <link rel="self" type="application/atom+xml" href="https://willemvanhulle.tech/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://willemvanhulle.tech"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-08-12T00:00:00+00:00</updated>
    <id>https://willemvanhulle.tech/atom.xml</id>
    <entry xml:lang="en">
        <title>Shell</title>
        <published>2025-08-12T00:00:00+00:00</published>
        <updated>2025-08-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Willem Vanhulle
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willemvanhulle.tech/blog/linux/shell/"/>
        <id>https://willemvanhulle.tech/blog/linux/shell/</id>
        
        <content type="html" xml:base="https://willemvanhulle.tech/blog/linux/shell/">&lt;h2 id=&quot;zoxide&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#zoxide&quot; aria-label=&quot;Anchor link for: zoxide&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ajeetdsouza&#x2F;zoxide&quot;&gt;Zoxide&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;An extension of the essential &lt;code&gt;cd&lt;&#x2F;code&gt;. It adds fuzzy folder name matching for your local filesystem. It uses you shell history to learn to jump to the right location.&lt;&#x2F;p&gt;
&lt;p&gt;For example, I have a folder &lt;code&gt;~&#x2F;.config&#x2F;nixos&lt;&#x2F;code&gt; and don’t want to type the whole path (more than once). I can just write &lt;code&gt;z nixos&lt;&#x2F;code&gt; and it will jump directly to the nested directory.&lt;&#x2F;p&gt;
&lt;p&gt;You can write more complex queries as well and configure your shell to point &lt;code&gt;cd&lt;&#x2F;code&gt; to &lt;code&gt;z&lt;&#x2F;code&gt; to replace &lt;code&gt;cd&lt;&#x2F;code&gt; completely.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;delta&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#delta&quot; aria-label=&quot;Anchor link for: delta&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dandavison&#x2F;delta&quot;&gt;Delta&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;An extension of the &lt;code&gt;diff&lt;&#x2F;code&gt; command that adds syntax highlighting (for most programming languages) and paging (no need to pipe into &lt;code&gt;less&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;more&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;You can configure it as the default diff tool for Git. In your &lt;code&gt;~&#x2F;.gitconfig&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;[core]
&lt;&#x2F;span&gt;&lt;span&gt;pager = delta
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;git-difftool&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#git-difftool&quot; aria-label=&quot;Anchor link for: git-difftool&quot;&gt;Git difftool&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can configure external tools in &lt;code&gt;git&lt;&#x2F;code&gt;, called ‘difftools’ that improve the default diff-viewing experience. My favourite difftool is &lt;a href=&quot;https:&#x2F;&#x2F;meldmerge.org&#x2F;&quot;&gt;&lt;code&gt;meld&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. You can configure it in &lt;code&gt;git&lt;&#x2F;code&gt; as the default difftool. In
&lt;code&gt;~&#x2F;.gitconfig&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;[diff]
&lt;&#x2F;span&gt;&lt;span&gt;tool = meld
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[difftool.meld]
&lt;&#x2F;span&gt;&lt;span&gt;cmd = meld &amp;quot;$LOCAL&amp;quot; &amp;quot;$REMOTE&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To launch a window comparing the whole repository at different points in time, use something like (&lt;code&gt;-d&lt;&#x2F;code&gt; stands for directory compare):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git difftool -d [COMMIT_LEFT]..[COMMIT_RIGHT]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git difftool -d [OTHER_COMMIT]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I recommend going into the settings of &lt;code&gt;meld&lt;&#x2F;code&gt; to turn on syntax highlighting.&lt;&#x2F;p&gt;
&lt;p&gt;You can also add it as a &lt;code&gt;git&lt;&#x2F;code&gt; alias&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;[alias]
&lt;&#x2F;span&gt;&lt;span&gt;meld=!git difftool -t meld --dir-diff
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, you just have to write: &lt;code&gt;git meld [BRANCH]&lt;&#x2F;code&gt; to compare the current branch with another branch.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nushell&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#nushell&quot; aria-label=&quot;Anchor link for: nushell&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.nushell.sh&#x2F;&quot;&gt;Nushell&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Bash scripts are difficult to write and maintain, because of old-fashioned syntax and a lack of modern features. Frequently, Bash itself does not support certain crucial programming operations.&lt;&#x2F;p&gt;
&lt;p&gt;For example, you have to crawl the web for info on how to use &lt;code&gt;jq&lt;&#x2F;code&gt; to extract a basic value from an API. It almost feels like playing “Dungeons and Dragons”.&lt;&#x2F;p&gt;
&lt;p&gt;Nushell alleviates the pains of frustrated Bash scripters:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It has modern programming language features.&lt;&#x2F;li&gt;
&lt;li&gt;You can still pipe as much as you want.&lt;&#x2F;li&gt;
&lt;li&gt;Most commands stay the same.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In general you don’t need to alias commands as much in Nushell:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Nushell has an &lt;code&gt;rm&lt;&#x2F;code&gt; command that can be configured to delete files to the trash always. Don’t search for an external ‘safe-delete’ &lt;code&gt;rm&lt;&#x2F;code&gt; command, it’s already part of Nushell core.&lt;&#x2F;li&gt;
&lt;li&gt;It also has an &lt;code&gt;ls&lt;&#x2F;code&gt; command that can be queried using a kind of SQL syntax with traditional pipes.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;audio-notifications&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#audio-notifications&quot; aria-label=&quot;Anchor link for: audio-notifications&quot;&gt;Audio notifications&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Do you start long-running commands and forget to follow-up on them? The visual &#x2F; audio bell of &lt;code&gt;konsole&lt;&#x2F;code&gt; was not so reliable for me. Instead, I figured out a way to do it within Nushell.&lt;&#x2F;p&gt;
&lt;p&gt;You can define a function in your Nushell config at &lt;code&gt;~&#x2F;.config&#x2F;nushell&#x2F;config.nu&lt;&#x2F;code&gt; and add it as &lt;code&gt;pre_prompt&lt;&#x2F;code&gt; hook:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;def&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; notify-long-command &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  const NOTIFICATION_THRESHOLD = 30sec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  const SOUND_FILE = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;&#x2F;run&#x2F;current-system&#x2F;sw&#x2F;share&#x2F;sounds&#x2F;freedesktop&#x2F;stereo&#x2F;bell.oga&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  let cmd_duration = (($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.CMD_DURATION_MS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; | default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;0&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) | into int | into duration -u ms)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  if $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cmd_duration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &amp;gt; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;NOTIFICATION_THRESHOLD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    try { ^pw-play $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SOUND_FILE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;} catch { ^paplay $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;SOUND_FILE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$env.config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; = (
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$env.config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;merge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    hooks: {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;      pre_prompt: [
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        {||
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;          notify-long-command
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;      ]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that Nushell has a ‘duration’ type like Rust. Tweak the parameters as you wish. Maybe you can find out a way to modify the sound based on metadata about the previous command?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;helix&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#helix&quot; aria-label=&quot;Anchor link for: helix&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;helix-editor.com&#x2F;&quot;&gt;Helix&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This terminal editor has intuitive and powerful keybindings that are suitable for beginners. It has a built-in fuzzy command and file search dialog.&lt;&#x2F;p&gt;
&lt;p&gt;It requires much less (or no) language server configuration. Most languages have syntax highlighting and basic linting support out of the box (provided the language server is installed as a system dependency).&lt;&#x2F;p&gt;
&lt;p&gt;My favourite keybindings:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;SPACE -&amp;gt; F: Fuzzy file-name search&lt;&#x2F;li&gt;
&lt;li&gt;SPACE -&amp;gt; E: Folder browser&lt;&#x2F;li&gt;
&lt;li&gt;gd: Goto definition&lt;&#x2F;li&gt;
&lt;li&gt;CTRL-o: Jump back (conflicts with Zellij)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To avoid problems with Zellij, you have to lock Zellij with CTRL-g before trying to jump back with CTRL-o.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;atuin&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#atuin&quot; aria-label=&quot;Anchor link for: atuin&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;atuin.sh&#x2F;&quot;&gt;Atuin&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Interactive search &#x2F; recommendation &#x2F; sync system for your shell history.&lt;&#x2F;p&gt;
&lt;p&gt;First time setup:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Register: atuin register -u USERNAME -e EMAIL&lt;&#x2F;li&gt;
&lt;li&gt;Choose password&lt;&#x2F;li&gt;
&lt;li&gt;Display encryption key: atuin key&lt;&#x2F;li&gt;
&lt;li&gt;Save key in password manager&lt;&#x2F;li&gt;
&lt;li&gt;Sync: atuin sync&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Second machine&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Login: atuin login&lt;&#x2F;li&gt;
&lt;li&gt;Enter USERNAME, PASSWORD&lt;&#x2F;li&gt;
&lt;li&gt;Enter encryption key from first machine&lt;&#x2F;li&gt;
&lt;li&gt;Sync: atuin sync&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;If problems:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Remove account: atuin account delete&lt;&#x2F;li&gt;
&lt;li&gt;Remove local data in &lt;code&gt;~&#x2F;.local&#x2F;share&#x2F;atuin&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Beware: By default it hijacks your upper arrow key to suggest commands from your history. However, you can make it narrow down to commands within the same Git repository or folder.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;oh-my-posh&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#oh-my-posh&quot; aria-label=&quot;Anchor link for: oh-my-posh&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ohmyposh.dev&#x2F;&quot;&gt;Oh-My-Posh&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The default prompt of my Bash shell looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;[wvhulle@x1:~]$
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The default Nushell prompt is&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f9f9f9;color:#111111;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;root&amp;gt;                        26-08-25 07:58:58
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The default &lt;code&gt;fish&lt;&#x2F;code&gt; shell prompt is slightly better and shows the &lt;code&gt;git&lt;&#x2F;code&gt; branch (if any) in the current directory.&lt;&#x2F;p&gt;
&lt;p&gt;Oh-My-Posh gives any shell a more meaninful shell prompt. It can display all kinds of system information such as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Compiler toolchain versions for many languages&lt;&#x2F;li&gt;
&lt;li&gt;Battery state, command duration, …&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You don’t have to build the prompt from scratch with individual data entries. Use one of the existing themes. My current them is a minimal one: ‘zash’.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bat&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#bat&quot; aria-label=&quot;Anchor link for: bat&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sharkdp&#x2F;bat&quot;&gt;Bat&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A replacement for &lt;code&gt;cat&lt;&#x2F;code&gt; that adds paging (so you don’t have to pipe it through &lt;code&gt;less&lt;&#x2F;code&gt;), syntax highlighting, and line numbers.&lt;&#x2F;p&gt;
&lt;p&gt;I don’t recommend turning this into a shell alias for the standard Linux command  &lt;code&gt;cat&lt;&#x2F;code&gt;. It may break other tools like &lt;code&gt;claude-code&lt;&#x2F;code&gt; that expect a &lt;code&gt;cat&lt;&#x2F;code&gt; that works in a non-interactive shell.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;direnv&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#direnv&quot; aria-label=&quot;Anchor link for: direnv&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;direnv.net&#x2F;&quot;&gt;Direnv&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Scaffold system environments by just entering and exiting directories. In combination with Nix or other declarative package managers, only the packages you need are available within your projects.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zellij&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#zellij&quot; aria-label=&quot;Anchor link for: zellij&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zellij.dev&#x2F;&quot;&gt;Zellij&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Easy terminal splitting. Detaching from views is possible to keep processes running in the background, you can re-attach later.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;claude-code&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#claude-code&quot; aria-label=&quot;Anchor link for: claude-code&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.anthropic.com&#x2F;en&#x2F;docs&#x2F;claude-code&quot;&gt;Claude-code&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A chat agent that has access to your filesystem and system commands. It sends all your local data (file contents, command output) to remote Anthropic servers, so be careful.&lt;&#x2F;p&gt;
&lt;p&gt;My favourite prompts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Scan the system journal for warnings or errors since the last boot and identify issues that can be resolved according to online bug reports.&lt;&#x2F;li&gt;
&lt;li&gt;Use NixOS options and home-manager options to state the bug fixes you just made declaratively in &lt;code&gt;nix&lt;&#x2F;code&gt; files.&lt;&#x2F;li&gt;
&lt;li&gt;I made this cool script, package it for distribution X.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ripgrep&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ripgrep&quot; aria-label=&quot;Anchor link for: ripgrep&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BurntSushi&#x2F;ripgrep&quot;&gt;Ripgrep&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Recursively search your current directory for a string or regex pattern, ignoring git-ignored and hidden files. Case insenstive search: &lt;code&gt;rg -i&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;github-cli&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#github-cli&quot; aria-label=&quot;Anchor link for: github-cli&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cli.github.com&#x2F;&quot;&gt;Github CLI&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;With &lt;code&gt;gh&lt;&#x2F;code&gt; you can manage PRs from the terminal. A frequent problem I have is that I forget if my branch got merged already. You can see this right away with: &lt;code&gt;gh pr view&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Most of the commands have a &lt;code&gt;--web&lt;&#x2F;code&gt; option that will automatically open the relevant page in your default web browser. For example, &lt;code&gt;gh repo view --web&lt;&#x2F;code&gt; will go to the main view of the current repository.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;carapace&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#carapace&quot; aria-label=&quot;Anchor link for: carapace&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;carapace.sh&#x2F;&quot;&gt;Carapace&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Aggregator for a useful, broad set of shell-completers. Can even complete online GitHub repositories. Integrates with most shells.&lt;&#x2F;p&gt;
&lt;p&gt;In Nushell, you can combine zoxide completions with carapace using this in your &lt;code&gt;~&#x2F;.config&#x2F;nushell&#x2F;config.nu&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;let external_completer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;spans&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;spans&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.0 {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    z|zi =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;      $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;spans&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; | skip 1 | zoxide query -l ...$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; | lines | where {|x| $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; != $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.PWD }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    _ =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;      carapace $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;spans&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.0 nushell ...$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;spans&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; | from json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$env.config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; = (
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;$env.config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;merge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    completions: {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;      external: {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        enable: true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        completer: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;external_completer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;      }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;typos&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#typos&quot; aria-label=&quot;Anchor link for: typos&quot;&gt;Typos&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Spell-checker for source-code that knows how to parse language grammers and adapt spell-checking rules accordingly. It’s main goal is to have a low amount of false negatives and being fast.&lt;&#x2F;p&gt;
&lt;p&gt;The most popular spell-checker in VS Code (based on cSpell), does not support language grammars and has too many false negatives.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ncdu&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ncdu&quot; aria-label=&quot;Anchor link for: ncdu&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.yorhel.nl&#x2F;ncdu&quot;&gt;NCDU&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Analyze which folders use the most disk space.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;powertop&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#powertop&quot; aria-label=&quot;Anchor link for: powertop&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;01.org&#x2F;powertop&#x2F;&quot;&gt;Powertop&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;See how many Watts your system is using and which processes are consuming the most power.&lt;&#x2F;p&gt;
&lt;p&gt;Use it to create custom “power profiles” with &lt;code&gt;power-profiles-daemon&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You can use a Bash script that listens for user events (like sliding the power profile slider from ‘balanced’ to ‘performance’):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;#!&#x2F;usr&#x2F;bin&#x2F;env bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;dbus-monitor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --system &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;type=&amp;#39;signal&amp;#39;,interface=&amp;#39;org.freedesktop.UPower.PowerProfiles&amp;#39;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;read &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;-r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -q &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;ActiveProfile&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Get current profile
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PROFILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;powerprofilesctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&#x2F;dev&#x2F;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;balanced&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Call the power profile handler
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;handler.sh &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;PROFILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then you just have to implement &lt;code&gt;handler.sh&lt;&#x2F;code&gt; to apply the right settings to your CPU and other power-consuming peripherals.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wluma&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#wluma&quot; aria-label=&quot;Anchor link for: wluma&quot;&gt;Wluma&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Adjusts your screen and keyboard brightness according to learned preferences. Everytime you adjust the brightness manually and &lt;code&gt;wluma&lt;&#x2F;code&gt; is running, it uses this information to adjust the brightness the next day around this time.&lt;&#x2F;p&gt;
&lt;p&gt;You can also use the webcam instead, but this might result in an LED flickering every 5 seconds.&lt;&#x2F;p&gt;
&lt;p&gt;For internal screens, like laptop screens, &lt;code&gt;wluma&lt;&#x2F;code&gt; works with minimal configuration. For external screens, you might need a Linux kernel module &lt;code&gt;ddcii-driver&lt;&#x2F;code&gt;, udev rules and maybe even create a i2c device.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;awatcher-activitywatch&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#awatcher-activitywatch&quot; aria-label=&quot;Anchor link for: awatcher-activitywatch&quot;&gt;AWatcher &amp;amp; ActivityWatch&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;ActivityWatch is an open-source local time tracking server with a web-frontend.Because it is local, you don’t have to worry about companies selling your usage data. It is essential to add client programs that harvest the data and send it to the local server.&lt;&#x2F;p&gt;
&lt;p&gt;Using hierarchical window title pattern matching rules you can keep track of:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How many hours for each client &#x2F; project a week.&lt;&#x2F;li&gt;
&lt;li&gt;Total screen time, over the past year.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It took me a while to figure out which client programs are actually necessary. On Wayland, you need to use &lt;code&gt;awatcher&lt;&#x2F;code&gt; to monitor desktop window titles and run it immediately after login (using autostart or a user service). Running it twice will result in errors.&lt;&#x2F;p&gt;
&lt;p&gt;Some user programs like Firefox and VS Code have ActivityWatch extensions that can provide more fine-grained usage data.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;geekbench&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#geekbench&quot; aria-label=&quot;Anchor link for: geekbench&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.geekbench.com&#x2F;&quot;&gt;Geekbench&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;When you want to make a choice between different computer systems, you may want to benchmark them against eachother. I found the (closed-source) Geekbench test suites quite easy to use. They exist for all operating systems and are packaged for most Linux distributions.&lt;&#x2F;p&gt;
&lt;p&gt;After installation, you can just run one of the &lt;code&gt;geekbench&lt;&#x2F;code&gt; commands (based on your CPU architecture). The results are uploaded to Geekbench servers and displayed in a web interface.&lt;&#x2F;p&gt;
&lt;p&gt;You can directly save results to your account, which is useful if you want to monitor for performance regressions on your machines.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Usage of GDB debugger</title>
        <published>2025-06-06T00:00:00+00:00</published>
        <updated>2025-06-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Willem Vanhulle
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willemvanhulle.tech/blog/bare-metal/gdb/"/>
        <id>https://willemvanhulle.tech/blog/bare-metal/gdb/</id>
        
        <content type="html" xml:base="https://willemvanhulle.tech/blog/bare-metal/gdb/">&lt;h2 id=&quot;debugging-with-gdb&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#debugging-with-gdb&quot; aria-label=&quot;Anchor link for: debugging-with-gdb&quot;&gt;Debugging with GDB&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Once you start creating slightly more complicated embedded programs, you might want to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;introspect the values of local variables&lt;&#x2F;li&gt;
&lt;li&gt;follow the execution flow&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For this, you need a piece of software called a debugger. The most commonly used debugger for Rust and C is &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;GNU_Debugger&quot;&gt;GDB&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Remark: In VS Code, you can install the &lt;code&gt;probe-rs-debug&lt;&#x2F;code&gt; extension to use the &lt;code&gt;probe-rs&lt;&#x2F;code&gt; toolkit for debugging. It uses a different protocol than &lt;code&gt;gdb&lt;&#x2F;code&gt;. See &lt;a href=&quot;https:&#x2F;&#x2F;probe.rs&#x2F;docs&#x2F;tools&#x2F;debugger&#x2F;&quot;&gt;instructions&lt;&#x2F;a&gt;.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;setup-of-cargo-embed&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#setup-of-cargo-embed&quot; aria-label=&quot;Anchor link for: setup-of-cargo-embed&quot;&gt;Setup of &lt;code&gt;cargo-embed&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Adjust the &lt;code&gt;Embed.toml&lt;&#x2F;code&gt; file in the root of this repository if necessary. This file configures the behavior of the &lt;code&gt;cargo embed&lt;&#x2F;code&gt; command when run on your laptop.&lt;&#x2F;p&gt;
&lt;p&gt;For example, if the configuration contains the following, a GDB debug server session will be started, and the loaded program will be reset to the first instruction.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;default.gdb&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;enabled &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;default.reset&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;halt_afterwards &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Prevent lines from being merged or reordered during the build step of your program. These kinds of changes can make it harder for the debugger to stop at the right breakpoints. Add the following to &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;profile.dev&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;debug &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;opt-level &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To be sure the new configuration is used, you can clear the &lt;code&gt;target&lt;&#x2F;code&gt; build cache with &lt;code&gt;cargo clean&lt;&#x2F;code&gt; and then build again:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; clean
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --example &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;BINARY_EXAMPLE_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;starting-a-gdb-client&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#starting-a-gdb-client&quot; aria-label=&quot;Anchor link for: starting-a-gdb-client&quot;&gt;Starting a GDB Client&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;While searching for an appropriate GDB package, look for one that supports the architecture of your target chip. In the case of a Pico 2, &lt;code&gt;gdb&lt;&#x2F;code&gt; needs &lt;code&gt;ARM&lt;&#x2F;code&gt; support built in.&lt;&#x2F;p&gt;
&lt;p&gt;Install the multi-architecture version of &lt;code&gt;gdb&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; apt-get install gdb-multiarch
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then run the following command to create and connect a &lt;code&gt;gdb&lt;&#x2F;code&gt; debugging client:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;gdb-multiarch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; target&#x2F;thumbv8m.main-none-eabi&#x2F;debug&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;BINARY_EXAMPLE_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Note: The command may also be &lt;code&gt;gdb&lt;&#x2F;code&gt;.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Within the &lt;code&gt;gdb&lt;&#x2F;code&gt; client on your laptop, you have to connect to the running &lt;code&gt;GDB&lt;&#x2F;code&gt; server on the debug Pico probe:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;target remote :1337
&lt;&#x2F;span&gt;&lt;span&gt;monitor reset halt # optionally resets to the first instruction
&lt;&#x2F;span&gt;&lt;span&gt;tui enable
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Alternatively, you can tell &lt;code&gt;gdb&lt;&#x2F;code&gt; to execute these commands automatically by writing them in a &lt;code&gt;.gdbinit&lt;&#x2F;code&gt; file in the root of this repository.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;common-gdb-commands&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#common-gdb-commands&quot; aria-label=&quot;Anchor link for: common-gdb-commands&quot;&gt;Common GDB Commands&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Breakpoints can be set in the &lt;code&gt;gdb&lt;&#x2F;code&gt; client by using the &lt;code&gt;break&lt;&#x2F;code&gt; command followed by a line number or function name:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;break [FUNCTION_NAME]  # Set a breakpoint at a specific function
&lt;&#x2F;span&gt;&lt;span&gt;break [LINE_NUMBER]  # Set a breakpoint at a specific line number
&lt;&#x2F;span&gt;&lt;span&gt;break [FILE_NAME]:[LINE_NUMBER]  # Set a breakpoint at a specific line in a file
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also write hardware breakpoints directly in your code with &lt;code&gt;cortex_m::asm::bkpt()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To progress through the execution of your debugged program, you can use:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;continue  # Continue execution until the next breakpoint is hit
&lt;&#x2F;span&gt;&lt;span&gt;next      # Step to the next line of code
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For introspection of variables:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;print [VAR_NAME]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Logging with defmt over RTT</title>
        <published>2025-06-05T00:00:00+00:00</published>
        <updated>2025-06-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Willem Vanhulle
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willemvanhulle.tech/blog/bare-metal/defmt-logging/"/>
        <id>https://willemvanhulle.tech/blog/bare-metal/defmt-logging/</id>
        
        <content type="html" xml:base="https://willemvanhulle.tech/blog/bare-metal/defmt-logging/">&lt;h2 id=&quot;simple-logging&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#simple-logging&quot; aria-label=&quot;Anchor link for: simple-logging&quot;&gt;Simple Logging&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;RTT (Real-Time Transfer) is a logging protocol that can be used on top of an SWD connection. It does not require specifying the baud rate, etc.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;defmt&lt;&#x2F;code&gt; crate is the most popular crate for logging from embedded Rust programs. It exports macros like &lt;code&gt;info!&lt;&#x2F;code&gt; and &lt;code&gt;debug!&lt;&#x2F;code&gt;, similar to the macros in the standard &lt;code&gt;log&lt;&#x2F;code&gt; or &lt;code&gt;tracing&lt;&#x2F;code&gt; crates in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;For the debug probe to actually show the log output from the target, you need to enable a “transport”. In the case of &lt;code&gt;defmt&lt;&#x2F;code&gt;, it is usually the &lt;code&gt;RTT&lt;&#x2F;code&gt; transport using the &lt;code&gt;defmt-rtt&lt;&#x2F;code&gt; crate. The &lt;code&gt;defmt-rtt&lt;&#x2F;code&gt; crate could be compared to &lt;code&gt;tracing-subscriber&lt;&#x2F;code&gt; or other mainstream log consumers.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;defmt&lt;&#x2F;code&gt; and &lt;code&gt;defmt-rtt&lt;&#x2F;code&gt; as a dependency to your &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; file. Also, enable the &lt;code&gt;defmt&lt;&#x2F;code&gt; features for all existing dependencies that have it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Import the &lt;code&gt;defmt-rtt&lt;&#x2F;code&gt; module in your binary or library:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt; defmt_rtt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as _&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This may seem useless, but it enables the setup of data necessary to link the binary against the &lt;code&gt;defmt-rtt&lt;&#x2F;code&gt; crate.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Add a compiler flag under the current target in the &lt;code&gt;.cargo&#x2F;config.toml&lt;&#x2F;code&gt; file: &lt;code&gt;-C link-arg=-Tdefmt.x&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;target.thumbv8m.main-none-eabihf&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;rustflags &lt;&#x2F;span&gt;&lt;span&gt;= [
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;-C&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;link-arg=--nmagic&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;-C&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;link-arg=-Tlink.x&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;-C&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;link-arg=-Tdefmt.x&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;-C&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;target-cpu=cortex-m33&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Specify the log level for &lt;code&gt;defmt&lt;&#x2F;code&gt; in the &lt;code&gt;.cargo&#x2F;config.toml&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;DEFMT_LOG &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;debug&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Enable &lt;code&gt;rtt&lt;&#x2F;code&gt; in the &lt;code&gt;Embed.toml&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;default.rtt&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;enabled &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Add invocations of the &lt;code&gt;defmt&lt;&#x2F;code&gt; macros throughout your library or binary code (as necessary). For example, you could write:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;defmt::info;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;_spawner&lt;&#x2F;span&gt;&lt;span&gt;: Spawner) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      info!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;A new iteration of the loop has started.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is nothing stopping you from adding such statements to library code.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Compile, flash, and run your binary on the target Pico 2 W:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This should open an RTT console that shows the log messages emitted by the &lt;code&gt;defmt&lt;&#x2F;code&gt; statements in your code.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Introduction to Embassy</title>
        <published>2025-06-04T00:00:00+00:00</published>
        <updated>2025-06-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Willem Vanhulle
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willemvanhulle.tech/blog/bare-metal/embassy-example/"/>
        <id>https://willemvanhulle.tech/blog/bare-metal/embassy-example/</id>
        
        <content type="html" xml:base="https://willemvanhulle.tech/blog/bare-metal/embassy-example/">&lt;h2 id=&quot;minimal-embassy-example&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#minimal-embassy-example&quot; aria-label=&quot;Anchor link for: minimal-embassy-example&quot;&gt;Minimal Embassy example&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;It can be useful to start with a minimal Embassy program. The following does nothing but can serve as a template for future programs.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;no_std&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;no_main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt; defmt_rtt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as _&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;embassy_executor::{Spawner, main};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;embassy_rp::config::Config;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt; panic_probe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;as _&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;embassy_rp::bind_interrupts;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;bind_interrupts!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Irqs {
&lt;&#x2F;span&gt;&lt;span&gt;    PIO0_IRQ_0 =&amp;gt; InterruptHandler&amp;lt;PIO0&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;_spawner&lt;&#x2F;span&gt;&lt;span&gt;: Spawner) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;embassy_rp::init(Config::default());
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      embassy_futures::yield_now().await;
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, there are two notable attributes at the top of the file.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#![no_std]&lt;&#x2F;code&gt; means that the program does not use the standard library. Embedded systems are too small for the standard library. Instead of using &lt;code&gt;std::String&lt;&#x2F;code&gt;, you would a statically allocated &lt;code&gt;heapless::String&lt;&#x2F;code&gt;. Most &lt;code&gt;std&lt;&#x2F;code&gt; heap allocated container types have an analogue in &lt;code&gt;heapless&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;#![no_main]&lt;&#x2F;code&gt; means that the program does not have a typical &lt;code&gt;main&lt;&#x2F;code&gt; function (with arguments or an exit code) as on a typical operating system. Instead, calling and creating the &lt;code&gt;main&lt;&#x2F;code&gt; function is completely handled by the Embassy framework.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Then there are two &lt;code&gt;use x as _;&lt;&#x2F;code&gt; lines. These crates don’t expose functions or public modules to be used, but they contain setup code that should be included at least once in your embedded program.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;panic_probe&lt;&#x2F;code&gt; crate provides a panic handler that is compatible with Embassy. Panics are &lt;strong&gt;fatal errors&lt;&#x2F;strong&gt;. Every embedded program needs a panic handler because traditional panics would unwind or abort and yield control back to the operating system. This operating system is absent, so we have to tell the compiler how to handle panics. Usually, this means going into an infinite loop.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;defmt_rtt&lt;&#x2F;code&gt; is not useful for the moment, but once you have configured a hardware debugger, it will allow you to log messages to the debugger console. This is useful for debugging your program.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There is a macro call &lt;code&gt;embassy_rp::bind_interrupts!&lt;&#x2F;code&gt; that binds hardware interrupts with the Embassy framework. This is necessary to be able to use hardware interrupts in your program. Hardware interrupts can stop the current ongoing computation and jump execution to some handler code elsewhere. Examples of hardware interrupt bindings available on the Pico 2 are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PIO0_IRQ_0&lt;&#x2F;code&gt; is an interrupt coming from the PIO peripheral.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;USBCTRL_IRQ&lt;&#x2F;code&gt; for USB interrupts (relevant in USB serial communication).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ADC_IRQ_FIFO&lt;&#x2F;code&gt; for ADC interrupts (relevant for reading data from the analog-to-digital converter in the moisture sensor).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;code&gt;spawner&lt;&#x2F;code&gt; argument allows users to spawn asynchronous tasks. Keep in mind, however, that each task should be non-generic and completely specified at compile time. This is because the Embassy framework does not support dynamic task creation at runtime.&lt;&#x2F;p&gt;
&lt;p&gt;The last line &lt;code&gt;loop { yield_now().await }&lt;&#x2F;code&gt; may seem unnecessary. The reason I have to write it is because the return type of &lt;code&gt;main&lt;&#x2F;code&gt; is “never” (written as &lt;code&gt;!&lt;&#x2F;code&gt;). The &lt;code&gt;never&lt;&#x2F;code&gt; return type is the type for a function that never returns.&lt;&#x2F;p&gt;
&lt;p&gt;Because of the signature of &lt;code&gt;main&lt;&#x2F;code&gt;, we cannot simply escape the &lt;code&gt;main&lt;&#x2F;code&gt; function. Running this program is the only thing that happens on the microcontroller. So we have to keep looping, even if we have already finished our work.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;levels-of-abstraction-in-embedded-rust&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#levels-of-abstraction-in-embedded-rust&quot; aria-label=&quot;Anchor link for: levels-of-abstraction-in-embedded-rust&quot;&gt;Levels of Abstraction in Embedded Rust&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This section provides an overview of the different levels of abstraction that can be used when programming microcontrollers in Rust.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;low-level&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#low-level&quot; aria-label=&quot;Anchor link for: low-level&quot;&gt;Low Level&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The lowest level of software abstraction provides direct access to the microcontroller’s hardware registers.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Core Support Crate&lt;&#x2F;strong&gt;: Enables access to the core processor’s features, like interrupts and system timers. See &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;cortex-m&quot;&gt;Cortex-M&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Peripheral Access Crate (PAC)&lt;&#x2F;strong&gt;: Built on top of the core support crate, the PAC contains auto-generated code for accessing hardware peripherals (like GPIO, ADC, etc.) based on SVD files from the chip manufacturer. See &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;rp235x-pac&quot;&gt;RP235X-PAC&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The Embassy framework builds on top of the PAC and HAL to provide a more intuitive and convenient API for accessing the hardware.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;medium-level&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#medium-level&quot; aria-label=&quot;Anchor link for: medium-level&quot;&gt;Medium Level&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;If the Embassy framework doesn’t suit your needs, you can fall back to a more conventional level of abstraction without &lt;code&gt;async&#x2F;await&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;strong&gt;Hardware Abstraction Layer (HAL)&lt;&#x2F;strong&gt; is a more convenient way to access the hardware. It provides a higher level of abstraction than the PAC but still allows direct hardware access.&lt;&#x2F;p&gt;
&lt;p&gt;The Pico 2 has &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;rp235x-hal&quot;&gt;rp235x-hal&lt;&#x2F;a&gt; as its HAL crate. You can view the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rp-rs&#x2F;rp-hal&#x2F;tree&#x2F;main&#x2F;rp235x-hal-examples&quot;&gt;examples&lt;&#x2F;a&gt;, which were used as a reference for this workshop.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Remark: If you need to preempt tasks (i.e., interrupt a lower-priority task to run a higher-priority one), you should consider using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rtic-rs&#x2F;rtic&quot;&gt;RTIC&lt;&#x2F;a&gt;. RTIC provides a different concurrency model based on preemption and priorities, which may be required for real-time applications.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;high-level&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#high-level&quot; aria-label=&quot;Anchor link for: high-level&quot;&gt;High Level&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;For commonly used microcontrollers, there is often at least one good &lt;strong&gt;Board Support Package (BSP)&lt;&#x2F;strong&gt;. These are crates that provide a convenient, board-specific API, though they are sometimes less customizable than a HAL. For example, in the case of the Micro:bit controller, the BSP is called &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;microbit&quot;&gt;microbit&lt;&#x2F;a&gt; and it allows you to draw shapes on the on-board LED array.&lt;&#x2F;p&gt;
&lt;p&gt;For the Raspberry Pi Pico 2 W, &lt;code&gt;embassy&lt;&#x2F;code&gt; (and its &lt;code&gt;embassy-rp&lt;&#x2F;code&gt; plugin) come the closest to a full-featured BSP.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;more-reading-material&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#more-reading-material&quot; aria-label=&quot;Anchor link for: more-reading-material&quot;&gt;More Reading Material&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Interesting books about embedded Rust:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There is a book for beginners in embedded Rust: &lt;a href=&quot;https:&#x2F;&#x2F;docs.rust-embedded.org&#x2F;discovery-mb2&#x2F;&quot;&gt;The Discovery Book&lt;&#x2F;a&gt;. It assumes you have a Micro:bit v2 (~€20).&lt;&#x2F;li&gt;
&lt;li&gt;There is also a book about embedded Rust using an STM32 chip: &lt;a href=&quot;https:&#x2F;&#x2F;docs.rust-embedded.org&#x2F;book&#x2F;&quot;&gt;The Embedded Rust Book&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Another book about Rust and the Raspberry Pi Pico 2 is &lt;a href=&quot;https:&#x2F;&#x2F;pico.implrust.com&#x2F;&quot;&gt;Pico, In-Depth&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Pico 2 as debugprobe</title>
        <published>2025-06-03T00:00:00+00:00</published>
        <updated>2025-06-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Willem Vanhulle
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willemvanhulle.tech/blog/bare-metal/pico-debug/"/>
        <id>https://willemvanhulle.tech/blog/bare-metal/pico-debug/</id>
        
        <content type="html" xml:base="https://willemvanhulle.tech/blog/bare-metal/pico-debug/">&lt;p&gt;On most popular microcontrollers used for educational purposes, there is already some hardware debugging support (also called a &lt;strong&gt;hardware debug probe&lt;&#x2F;strong&gt;) on the board itself, such as on the &lt;a href=&quot;https:&#x2F;&#x2F;microbit.org&#x2F;&quot;&gt;Micro:bit&lt;&#x2F;a&gt; or the &lt;a href=&quot;https:&#x2F;&#x2F;www.espressif.com&#x2F;en&#x2F;products&#x2F;socs&#x2F;esp32&quot;&gt;ESP32&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Having this debug probe allows you to debug the code running on the target Pico using GDB or other debugging tools.&lt;&#x2F;p&gt;
&lt;p&gt;A debug probe comes in the form of a small secondary chip that can be used to debug the main microcontroller on the board.&lt;&#x2F;p&gt;
&lt;p&gt;The Pico family of microcontrollers does not have this feature built-in. You have two options for debugging a Pico:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It is possible to turn a spare Raspberry Pico into a hardware debugging probe for another Pico.&lt;&#x2F;li&gt;
&lt;li&gt;You buy (or borrow) an official Rasberry Pi hardware debug probe.&lt;&#x2F;li&gt;
&lt;li&gt;You manually force the target into BOOTSELF mode and flash with &lt;code&gt;picotool&lt;&#x2F;code&gt;. In that case, you will not be able to debug as easily (you will need a serial monitor).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In this workshop, we will pursue the first option. If you get stuck, feel free to ask for a pre-made hardware debugger.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;turning-a-pico-2-into-a-debugger-pico&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#turning-a-pico-2-into-a-debugger-pico&quot; aria-label=&quot;Anchor link for: turning-a-pico-2-into-a-debugger-pico&quot;&gt;Turning a Pico 2 into a debugger Pico&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The Raspberry Pi Foundation provides images for Picos that can be flashed to turn a Pico into a hardware debugger.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Download the latest &lt;code&gt;debugprobe_on_pico.uf2&lt;&#x2F;code&gt; flash image from the official &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;raspberrypi&#x2F;debugprobe&#x2F;releases&quot;&gt;&lt;code&gt;debugprobe&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;releases.&lt;&#x2F;li&gt;
&lt;li&gt;Attach the Pico to your laptop while holding the white BOOTSEL button. A mass storage device will appear in your file manager. It will be called something like &lt;code&gt;RP2350&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Drop the downloaded &lt;code&gt;.uf2&lt;&#x2F;code&gt; file onto the mass storage drive emulated by the Pico. Wait for a fraction of a second while the Pico unmounts and reboots as a fresh &lt;code&gt;debugprobe&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Now you have successfully made a cheap hardware debugging probe.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wire-target-to-debugger&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#wire-target-to-debugger&quot; aria-label=&quot;Anchor link for: wire-target-to-debugger&quot;&gt;Wire target to debugger&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Let’s make some aliases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Assume &lt;strong&gt;D&lt;&#x2F;strong&gt; is the homemade debug probe (a Pico).&lt;&#x2F;li&gt;
&lt;li&gt;Assume &lt;strong&gt;T&lt;&#x2F;strong&gt; is the target Pico.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Right now, there is no cabling between the debug probe and the target Pico. The cables should be connected such that &lt;strong&gt;D&lt;&#x2F;strong&gt; can detect &lt;strong&gt;T&lt;&#x2F;strong&gt; over the SWD debugging protocol.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Important&lt;&#x2F;strong&gt;: For this step, you need to have a JST-SH cable. You can find them on &lt;a href=&quot;https:&#x2F;&#x2F;www.kiwi-electronics.com&#x2F;en&#x2F;jst-sh-1mm-pitch-3-pin-to-male-headers-cable-100mm-long-19930&quot;&gt;Kiwi&lt;&#x2F;a&gt;, but they can be hard to find.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Plug the white connector of the JST cable into the SWD socket of &lt;strong&gt;D&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Place &lt;strong&gt;T&lt;&#x2F;strong&gt; and &lt;strong&gt;D&lt;&#x2F;strong&gt; in parallel with their USB ports facing upwards (to prevent confusion).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Connect the male jumper pins. The three male header pins from &lt;strong&gt;T&lt;&#x2F;strong&gt;’s JST cable should be connected to &lt;strong&gt;D&lt;&#x2F;strong&gt; as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;T&lt;&#x2F;strong&gt; left (yellow) &amp;lt;-&amp;gt; &lt;strong&gt;D&lt;&#x2F;strong&gt; pin 5&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;T&lt;&#x2F;strong&gt; middle (black) &amp;lt;-&amp;gt; &lt;strong&gt;D&lt;&#x2F;strong&gt; pin 3&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;T&lt;&#x2F;strong&gt; right (orange) &amp;lt;-&amp;gt; &lt;strong&gt;D&lt;&#x2F;strong&gt; pin 4&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Instead of pin numbers, you can also use the pin names:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;T&lt;&#x2F;strong&gt; SWCLK &amp;lt;-&amp;gt; &lt;strong&gt;D&lt;&#x2F;strong&gt; GP3&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;T&lt;&#x2F;strong&gt; SWDIO &amp;lt;-&amp;gt; &lt;strong&gt;D&lt;&#x2F;strong&gt; GP2&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;T&lt;&#x2F;strong&gt; GND &amp;lt;-&amp;gt; &lt;strong&gt;D&lt;&#x2F;strong&gt; GND&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Provide power to &lt;strong&gt;T&lt;&#x2F;strong&gt; using a single USB cable by forwarding power from &lt;strong&gt;D&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;T&lt;&#x2F;strong&gt; GND pin 38 &amp;lt;-&amp;gt; &lt;strong&gt;D&lt;&#x2F;strong&gt; pin 38 (Connect ground)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;T&lt;&#x2F;strong&gt; VSYS pin 39 &amp;lt;-&amp;gt; &lt;strong&gt;D&lt;&#x2F;strong&gt; pin 39 (Connect power supply)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;em&gt;Remark: You can also connect &lt;strong&gt;T&lt;&#x2F;strong&gt; to &lt;strong&gt;D&lt;&#x2F;strong&gt; for UART communication. However, I have not needed it so far.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;configure-flashing-from-laptop&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#configure-flashing-from-laptop&quot; aria-label=&quot;Anchor link for: configure-flashing-from-laptop&quot;&gt;Configure flashing from laptop&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;There is still one step remaining: we have to configure our laptop’s development environment to enable flashing (this applies to any microcontroller with an onboard or external debugger).&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;code&gt;cargo-embed&lt;&#x2F;code&gt;, which is included in the &lt;code&gt;probe-rs&lt;&#x2F;code&gt; tool suite.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; install probe-rs-tools
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Verify that &lt;code&gt;cargo-embed&lt;&#x2F;code&gt; is available in your shell’s &lt;code&gt;PATH&lt;&#x2F;code&gt; (&lt;code&gt;cargo-[CMD]&lt;&#x2F;code&gt; can be called with &lt;code&gt;cargo [CMD]&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; embed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --version
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;udev&lt;&#x2F;code&gt; rules for &lt;code&gt;probe-rs&lt;&#x2F;code&gt; as described in the &lt;a href=&quot;https:&#x2F;&#x2F;probe.rs&#x2F;docs&#x2F;getting-started&#x2F;probe-setup&#x2F;&quot;&gt;probe-rs documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; curl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F;etc&#x2F;udev&#x2F;rules.d&#x2F;69-probe-rs.rules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;probe.rs&#x2F;files&#x2F;69-probe-rs.rules&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; udevadm control&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --reload-rules
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; udevadm trigger
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Now you can flash changes in the source code directly to the target Pico (without re-plugging it or holding the BOOTSEL button). The debug probe Pico will function as an intermediary between your laptop and the target Pico.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You should see two progress bars running to completion in your terminal. As soon as the flash process is finished:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;T&lt;&#x2F;strong&gt; will start running the new code.&lt;&#x2F;li&gt;
&lt;li&gt;A debug server will be started on &lt;strong&gt;D&lt;&#x2F;strong&gt; so that you can step through your code while it runs on &lt;strong&gt;T&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;While the Pico has a generous amount of flash memory, Embassy-produced binaries can sometimes be large. For microcontrollers with less memory, the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;johnthagen&#x2F;min-sized-rust&quot;&gt;Min-sized Rust&lt;&#x2F;a&gt; guide provides tips for reducing binary size.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Making generators</title>
        <published>2025-05-08T00:00:00+00:00</published>
        <updated>2025-05-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Willem Vanhulle
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willemvanhulle.tech/blog/streams/generators/"/>
        <id>https://willemvanhulle.tech/blog/streams/generators/</id>
        
        <content type="html" xml:base="https://willemvanhulle.tech/blog/streams/generators/">&lt;h2 id=&quot;simple-generators&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#simple-generators&quot; aria-label=&quot;Anchor link for: simple-generators&quot;&gt;Simple generators&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;iterators&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#iterators&quot; aria-label=&quot;Anchor link for: iterators&quot;&gt;Iterators&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;In functional programming, iterators replace loops. Rust provides many helper methods (called &lt;em&gt;adapter methods&lt;&#x2F;em&gt;) for iterators such as &lt;code&gt;map&lt;&#x2F;code&gt;, &lt;code&gt;filter&lt;&#x2F;code&gt;, &lt;code&gt;step_by&lt;&#x2F;code&gt;, … . But to apply this style of programming, you need some base iterators to start with.&lt;&#x2F;p&gt;
&lt;p&gt;The base (or leaf) iterators are the ones that are actually important. They are provided by the core language or a foundational user crate. Usually, it is a bad idea to implement your own iterators.&lt;&#x2F;p&gt;
&lt;p&gt;In case you decide to implement a new iterator anyway, have a look at the definition of an iterator:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;Iterator {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Item;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;blocking-generators&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#blocking-generators&quot; aria-label=&quot;Anchor link for: blocking-generators&quot;&gt;Blocking generators&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Although you could directly implement &lt;code&gt;next&lt;&#x2F;code&gt; for your own data-types, it might be more straightforward to use a &lt;strong&gt;generator&lt;&#x2F;strong&gt; to create an iterator for you. Generators are functions that output an anonymous type that implements the &lt;code&gt;Iterator&lt;&#x2F;code&gt; trait. The body of a generator has &lt;code&gt;yield X&lt;&#x2F;code&gt; statements that represent the result of an invocation to &lt;code&gt;next()&lt;&#x2F;code&gt; being &lt;code&gt; Some(X)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Remark&lt;&#x2F;strong&gt;: There is nothing special or new about generators in Rust. They have existed, for example, in JavaScript for many years.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A good crate in Rust for writing generators is  &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;genawaiter&#x2F;latest&#x2F;genawaiter&#x2F;&quot;&gt;&lt;code&gt;genawaiter&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; generator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;gen!({
&lt;&#x2F;span&gt;&lt;span&gt;    yield_!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; xs: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; generator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(xs, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using this crate, the &lt;code&gt;generator&lt;&#x2F;code&gt; variable is actually more than &lt;em&gt;just a generator&lt;&#x2F;em&gt; (something that can be converted into an &lt;code&gt;Iterator&lt;&#x2F;code&gt;). It is also a coroutine. See other posts on this blog to know more about coroutines in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Remark: The &lt;code&gt;gen!&lt;&#x2F;code&gt; and &lt;code&gt;yield_!&lt;&#x2F;code&gt;-macros will become built-in the core Rust language in the coming months. The &lt;code&gt;gen!&lt;&#x2F;code&gt; simply becomes the &lt;code&gt;gen&lt;&#x2F;code&gt; keyword for code blocks. Inside &lt;code&gt;gen&lt;&#x2F;code&gt;-blocks you can use &lt;code&gt;yield&lt;&#x2F;code&gt;. For now, you need nightly to use this.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;simple-async-generators&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#simple-async-generators&quot; aria-label=&quot;Anchor link for: simple-async-generators&quot;&gt;Simple async generators&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The iterators generated by the previous kind of generators is &lt;em&gt;blocking&lt;&#x2F;em&gt; (or synchronous ). The asynchronous (non-blocking) variant of a blocking iterator is a &lt;strong&gt;stream&lt;&#x2F;strong&gt; (an asynchronous iterator).&lt;&#x2F;p&gt;
&lt;p&gt;You can just keep using the &lt;code&gt;genawaiter&lt;&#x2F;code&gt; crate and add &lt;code&gt;await&lt;&#x2F;code&gt;-points in the body of your &lt;code&gt;gen!&lt;&#x2F;code&gt; generator definition. You need to, however, enable the &lt;code&gt;futures03&lt;&#x2F;code&gt; feature.&lt;&#x2F;p&gt;
&lt;p&gt;(From the documentation)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;async_one&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;async_two&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; generator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;gen!({
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; one &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;async_one&lt;&#x2F;span&gt;&lt;span&gt;().await;
&lt;&#x2F;span&gt;&lt;span&gt;    yield_!(one);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; two &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;async_two&lt;&#x2F;span&gt;&lt;span&gt;().await;
&lt;&#x2F;span&gt;&lt;span&gt;    yield_!(two);
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; items: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;().await;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(items, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An alternative is the &lt;code&gt;async-stream&lt;&#x2F;code&gt; crate (which has been updated more recently). The generators written with its &lt;code&gt;stream!&lt;&#x2F;code&gt; macro are always asynchronous streams (in contrast to &lt;code&gt;genawaiter&lt;&#x2F;code&gt; which also supports iterators).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Remark: Asynchronous generators will be included in stable rust in the coming months. As of May 2025 you still need to switch to a nightly compiler version and enable unstable features.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;maintainable-generators&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#maintainable-generators&quot; aria-label=&quot;Anchor link for: maintainable-generators&quot;&gt;Maintainable generators&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;generator-state&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#generator-state&quot; aria-label=&quot;Anchor link for: generator-state&quot;&gt;Generator state&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;While creating generators and putting yield statements, you will quickly run into very complex code. Code making use of &lt;code&gt;yield&lt;&#x2F;code&gt; may be hard to maintain. You will need a place to store the state of the generator. In the brute-force approach you just add local variables outside the main loop of your generator body.&lt;&#x2F;p&gt;
&lt;p&gt;For example, you could have something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; generator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;gen!({
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;do_something&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        yield_!(state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When state becomes bigger, it is time to switch to another approach.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-more-structured-construction&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-more-structured-construction&quot; aria-label=&quot;Anchor link for: a-more-structured-construction&quot;&gt;A more structured construction&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The most straightforward alternative for async generatorss is to use the &lt;code&gt;futures::stream::unfold&lt;&#x2F;code&gt; function. This function stores the state explicitly in its first argument and updates it incrementally with a closure (returning a &lt;code&gt;Future&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;futures::{stream, StreamExt};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;stream::unfold(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;| async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; next_state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; yielded &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;((yielded, next_state))
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; stream.collect::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;().await;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(result, vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A synchronous version of this (for normal &lt;code&gt;Iterator&lt;&#x2F;code&gt;s) can be found in the crate &lt;code&gt;itertools&lt;&#x2F;code&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;itertools&#x2F;latest&#x2F;itertools&#x2F;fn.unfold.html&quot;&gt;&lt;code&gt;itertools::unfold&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;An example from the crate docs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; fibonacci &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unfold&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;), |(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;x1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;x2&lt;&#x2F;span&gt;&lt;span&gt;)| {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Attempt to get the next Fibonacci number
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; next &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; x1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;saturating_add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;x2);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Shift left: ret &amp;lt;- x1 &amp;lt;- x2 &amp;lt;- next
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= *&lt;&#x2F;span&gt;&lt;span&gt;x1;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;x1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= *&lt;&#x2F;span&gt;&lt;span&gt;x2;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;x2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; next;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; If addition has saturated at the maximum, we are finished
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== *&lt;&#x2F;span&gt;&lt;span&gt;x1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; ret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(ret)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;itertools::assert_equal(fibonacci.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;by_ref&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                        vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;21&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;functional-combinators&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#functional-combinators&quot; aria-label=&quot;Anchor link for: functional-combinators&quot;&gt;Functional combinators&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;One problem with &lt;code&gt;unfold&lt;&#x2F;code&gt; is that less well-suited for scenarios in which you need to combine or split several streams&#x2F;iterators, for example while making your own functional combinators. The constructor &lt;code&gt;unfold&lt;&#x2F;code&gt; seems to be most appropriate when you need to &lt;strong&gt;create iterators or streams from scratch&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Writing your own combinators gives you the tools to &lt;em&gt;recombine streams&lt;&#x2F;em&gt; in a more functional or declarative way. Have a look at the combinators defined in &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;latest&#x2F;futures&#x2F;stream&#x2F;index.html&quot;&gt;&lt;code&gt;futures::stream&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to see what a common combinator implementation looks like.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Remark: See other posts about combinators for information on how to build your own &lt;strong&gt;declarative combinators&lt;&#x2F;strong&gt; such as custom variants on &lt;code&gt;merge&lt;&#x2F;code&gt; or &lt;code&gt;flatten&lt;&#x2F;code&gt;.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Building stream combinators</title>
        <published>2025-04-16T00:00:00+00:00</published>
        <updated>2025-04-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Willem Vanhulle
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willemvanhulle.tech/blog/streams/stream-combinators/"/>
        <id>https://willemvanhulle.tech/blog/streams/stream-combinators/</id>
        
        <content type="html" xml:base="https://willemvanhulle.tech/blog/streams/stream-combinators/">&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#introduction&quot; aria-label=&quot;Anchor link for: introduction&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;What if you know how to use streams, but you need some kind of functionality that is not in the &lt;code&gt;StreamExt&lt;&#x2F;code&gt; trait from &lt;code&gt;futures&lt;&#x2F;code&gt; or the standard library?&lt;&#x2F;p&gt;
&lt;p&gt;In that case, you might try an imperative approach and create the stream using the &lt;code&gt;unfold&lt;&#x2F;code&gt; function. This is a solution for simple cases, but it does not generalise well. Disambiguating between different parts of intermediate stream state quickly becomes difficult.&lt;&#x2F;p&gt;
&lt;p&gt;You might also want to try using imperative design patterns like loops, channels, spawns and generic functions. This approach quickly becomes unmaintainable because of its complexity.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;invalidation-through-moves&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#invalidation-through-moves&quot; aria-label=&quot;Anchor link for: invalidation-through-moves&quot;&gt;Invalidation through moves&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Remark&lt;&#x2F;strong&gt;: the following sections will be about &lt;code&gt;Unpin&lt;&#x2F;code&gt;. I wrote about it because I needed it later on to understand better how to construct combinators. You can skip this chapter if you want (or look at the official documentation).&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The physical location of variables used in your code may move throughout the lifetime of your program. In Rust, for example, it is common to move a variable through an assignment. A variable that is called by value by a function is &lt;strong&gt;moved&lt;&#x2F;strong&gt; (literally and conceptually) into the the function. The function takes conceptual ownership. As far as I know, this is called the &lt;strong&gt;move semantics&lt;&#x2F;strong&gt; of Rust.&lt;&#x2F;p&gt;
&lt;p&gt;However, through this conceptual&#x2F;semantical moving process, a physical move of the data in the registers of the CPU or other parts of memory may also occur. This is dangerous when the data being moved is self-referencing.&lt;&#x2F;p&gt;
&lt;p&gt;For more information, see &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;pin&#x2F;index.html&quot;&gt;&lt;code&gt;std::pin&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;clearing-up-unpin&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#clearing-up-unpin&quot; aria-label=&quot;Anchor link for: clearing-up-unpin&quot;&gt;Clearing up &lt;code&gt;Unpin&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The confusing aspect of &lt;code&gt;Pin&lt;&#x2F;code&gt; and &lt;code&gt;Unpin&lt;&#x2F;code&gt; in Rust, is that it is not &lt;code&gt;Pin&lt;&#x2F;code&gt; which is the first that you should understand, but it is &lt;code&gt;Unpin&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The naming of &lt;code&gt;Unpin&lt;&#x2F;code&gt; makes it seem like it is some counterpart to &lt;code&gt;Pin&lt;&#x2F;code&gt;. However, it is not.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Unpin&lt;&#x2F;code&gt; is an auto-trait which means that the compiler derives &lt;code&gt;Unpin&lt;&#x2F;code&gt; for everything that it deems &lt;strong&gt;safe to move&lt;&#x2F;strong&gt;. This is done at compile-time and behind the scene by the compiler for every “auto-trait”.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cannot-be-moved-unpin&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#cannot-be-moved-unpin&quot; aria-label=&quot;Anchor link for: cannot-be-moved-unpin&quot;&gt;Cannot be moved &#x2F; &lt;code&gt;!Unpin&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Anything that looks like it cannot be moved by the compiler, will be marked automatically as &lt;code&gt;!Unpin&lt;&#x2F;code&gt;, not &lt;code&gt;Unpin&lt;&#x2F;code&gt;, or un-moveable. The reasoning by the compiler is that it necessary to detect when some kind of data type would be invalidated by a move and prevent dangerous actions by users (programmers implementing async functionality).&lt;&#x2F;p&gt;
&lt;p&gt;Examples of &lt;code&gt;!Unpin&lt;&#x2F;code&gt; Rust data-types:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;generators:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;normal generators written with &lt;code&gt;gen&lt;&#x2F;code&gt;-blocks or macros&lt;&#x2F;li&gt;
&lt;li&gt;async generators written with the macro &lt;code&gt;async_stream::stream! {}&lt;&#x2F;code&gt; (implementing the &lt;code&gt;Stream&lt;&#x2F;code&gt; trait)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;self-referencing data that is &lt;strong&gt;code-generated by the compiler&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;state machines generated by &lt;code&gt;async {}&lt;&#x2F;code&gt; blocks&lt;&#x2F;li&gt;
&lt;li&gt;… ?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;self-referencing user data structures:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;naive trees&lt;&#x2F;li&gt;
&lt;li&gt;strings with slices&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;types with a manual &lt;code&gt;PhantomPinned&lt;&#x2F;code&gt; field&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;&#x2F;strong&gt;: The reason that &lt;code&gt;async {}&lt;&#x2F;code&gt; blocks are &lt;code&gt;!Unpin&lt;&#x2F;code&gt; is that the compiler is lazy and does not analyze such blocks automatically to check whether they are &lt;code&gt;Unpin&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;purpose-of-data-type-pin&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#purpose-of-data-type-pin&quot; aria-label=&quot;Anchor link for: purpose-of-data-type-pin&quot;&gt;Purpose of data-type &lt;code&gt;Pin&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Pin&lt;&#x2F;code&gt; as a data-type has only one requirement: it’s inner type should implement &lt;code&gt;Deref&lt;&#x2F;code&gt;. In other words, &lt;code&gt;Pin&lt;&#x2F;code&gt; is a wrapper around pointer &#x2F; reference-like datatypes.&lt;&#x2F;p&gt;
&lt;p&gt;The concrete type &lt;code&gt;Pin&lt;&#x2F;code&gt; is, in fact, not a real physical type. It does not represent a different location or address in memory. It is merely a Rust compiler construct that manifests itself as a type available to the users.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;Pin&lt;&#x2F;code&gt; type is essentially a contract for pointer-like types, maintained by two methods that require the pointed-to (also called “pointee”) to implement &lt;code&gt;Unpin&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;constructor &lt;code&gt;Pin::new()&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: takes any owned &lt;code&gt;Unpin&lt;&#x2F;code&gt; object (safe-to-move, not &lt;code&gt;!Unpin&lt;&#x2F;code&gt;) and takes ownership of it. There is no way to get ownership back. You may, however, implement a &lt;code&gt;Drop&lt;&#x2F;code&gt; implementation which will be run on de-allocation of &lt;code&gt;Pin&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;strong&gt;mutable getter &lt;code&gt;Pin::get_mut()&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: allows you get mutable access to the contained, pinned, &lt;code&gt;Unpin&lt;&#x2F;code&gt; value. This allows you to still call methods with the &lt;code&gt;&amp;amp;mut Self&lt;&#x2F;code&gt; signature on the pinned data.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The reason that the &lt;code&gt;get_mut&lt;&#x2F;code&gt; method requires the pointee to be &lt;code&gt;Unpin&lt;&#x2F;code&gt; is that mutable access through a mutable reference can be used to move the content of the &lt;code&gt;Pin&lt;&#x2F;code&gt; with a function like &lt;code&gt;std::mem::replace&lt;&#x2F;code&gt;. This could invalidate any pinned otherwise unmoveable &lt;code&gt;!Unpin&lt;&#x2F;code&gt; type.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;Metaphor&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;Type state&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;Ownership event&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;em&gt;undressed&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Type&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;moveable &#x2F; free&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;em&gt;dress-up&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Pin::new(Type)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;give up ownership&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;em&gt;dressed-up&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Pin&amp;lt;Type&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;stuck in memory&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;em&gt;dress-down&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Pin::new(Type).get_mut()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;acquire edit access&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Conclusion:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Pin&lt;&#x2F;code&gt; does not pin anything physically at run-time, but relies on the auto-trait &lt;code&gt;!Unpin&lt;&#x2F;code&gt; to prevent dangerous moves at run-time.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;convert-unpin-into-unpin&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#convert-unpin-into-unpin&quot; aria-label=&quot;Anchor link for: convert-unpin-into-unpin&quot;&gt;Convert &lt;code&gt;!Unpin&lt;&#x2F;code&gt; into &lt;code&gt;Unpin&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Almost all primitives in Rust are &lt;code&gt;Unpin&lt;&#x2F;code&gt;. Whenever you encounter something that is not &lt;code&gt;Unpin&lt;&#x2F;code&gt; (and has not non-&lt;code&gt;&#x27;static&lt;&#x2F;code&gt; references), you can just allocate it on the heap with the function &lt;code&gt;Box::pin&lt;&#x2F;code&gt;. The &lt;code&gt;Box::pin&lt;&#x2F;code&gt; is shorthand for &lt;code&gt;Pin::new(Box::new())&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The result of the &lt;code&gt;Box::pin&lt;&#x2F;code&gt; is a combination:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The heap-allocated pinned object will not be moved by any code generated by the Rust compiler;&lt;&#x2F;li&gt;
&lt;li&gt;We can still drop the pinned object and the &lt;code&gt;Drop&lt;&#x2F;code&gt; implementations will run.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let’s take the following as an example of something that is &lt;code&gt;!Unpin&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;MapFut&amp;lt;Fut&amp;gt; where Fut: Future {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;fut&lt;&#x2F;span&gt;&lt;span&gt;: Fut,
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A common approach when handling extensions or combinators of futures which are themselves futures, is by &lt;strong&gt;projecting&lt;&#x2F;strong&gt; &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;&#x2F;code&gt;into &lt;code&gt;&amp;amp;mut Self&lt;&#x2F;code&gt;. The projection is usually called &lt;code&gt;this&lt;&#x2F;code&gt; (the &lt;code&gt;self&lt;&#x2F;code&gt; keyword is reserved).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Fut&amp;gt; Future &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;MapFut&amp;lt;Fut&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: Pin&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) -&amp;gt; Poll {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; We need to do something with `self.fut`.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; We need `Pin&amp;lt;&amp;amp;mut Self&amp;gt; -&amp;gt; &amp;amp;mut Self`.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; The following wil not compile, because `Self: !Unpin`.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; this &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        unimplemented!()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example the user struct &lt;code&gt;MapFut&lt;&#x2F;code&gt; is &lt;code&gt;!Unpin&lt;&#x2F;code&gt;, so &lt;code&gt;get_mut&lt;&#x2F;code&gt; cannot be used. The &lt;code&gt;get_mut&lt;&#x2F;code&gt; function requires &lt;code&gt;Self: Unpin&lt;&#x2F;code&gt; as mentioned in the previous section.&lt;&#x2F;p&gt;
&lt;p&gt;The simplest solution is to refine the definition of &lt;code&gt;MapFut&lt;&#x2F;code&gt; as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;MapFut&amp;lt;Fut&amp;gt; where Fut: Future {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;fut&lt;&#x2F;span&gt;&lt;span&gt;: Pin&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Fut&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now &lt;code&gt;fut&lt;&#x2F;code&gt; is a pinned pointer to a location on the heap.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;unsafe-pin-methods-optional&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#unsafe-pin-methods-optional&quot; aria-label=&quot;Anchor link for: unsafe-pin-methods-optional&quot;&gt;Unsafe &lt;code&gt;Pin&lt;&#x2F;code&gt; methods (optional)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Until now I explicitly avoided mentioning or using the unsafe methods of the &lt;code&gt;Pin&lt;&#x2F;code&gt; type. Beside &lt;code&gt;Pin::new()&lt;&#x2F;code&gt; and &lt;code&gt;Pin::get_mut()&lt;&#x2F;code&gt;, &lt;code&gt;Pin&lt;&#x2F;code&gt; also has a few &lt;code&gt;unsafe&lt;&#x2F;code&gt; counterparts.&lt;&#x2F;p&gt;
&lt;p&gt;You might have been tempted by the Rust compiler to use the &lt;code&gt;unsafe&lt;&#x2F;code&gt; methods because they do not have an &lt;code&gt;Unpin&lt;&#x2F;code&gt; constraint. But if you go in that direction, you effectively disable automatic and important checks by the compiler at run-time.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-ready-future&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-ready-future&quot; aria-label=&quot;Anchor link for: the-ready-future&quot;&gt;The &lt;code&gt;Ready&lt;&#x2F;code&gt; future&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Anything can be turned into a future using the &lt;code&gt;Ready&lt;&#x2F;code&gt; future. This future takes the source and puts it inside an &lt;code&gt;Option&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Ready&amp;lt;T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This future never has to wake up, because it yields a value immediately and is read on the first &lt;code&gt;poll&lt;&#x2F;code&gt; call. This is why the context (and its waker) are ignored.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; Future &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Ready&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; T;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: Pin&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;_cx&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Context&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) -&amp;gt; Poll&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        Poll::Ready(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Ready polled after completion&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To use this future, you can directly call the constructor &lt;code&gt;Ready::new()&lt;&#x2F;code&gt; or you can call &lt;code&gt;ready()&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ready&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;).await)`;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Remark: &lt;code&gt;.await&lt;&#x2F;code&gt; automatically converts everything in a future with &lt;code&gt;IntoFuture&lt;&#x2F;code&gt;, so it might not even be necessary to use &lt;code&gt;Ready&lt;&#x2F;code&gt; explicitly.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;simple-stream-combinators&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#simple-stream-combinators&quot; aria-label=&quot;Anchor link for: simple-stream-combinators&quot;&gt;Simple stream combinators&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;definition-of-a-stream&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#definition-of-a-stream&quot; aria-label=&quot;Anchor link for: definition-of-a-stream&quot;&gt;Definition of a stream&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A stream is an future that may be polled more than once and yield more than one &lt;code&gt;Poll::Ready&lt;&#x2F;code&gt; value.&lt;&#x2F;p&gt;
&lt;p&gt;The official definition is a trait:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;Stream {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Item;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;poll_next&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: Pin&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;cx&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Context&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; Poll&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice the similary with the &lt;code&gt;Future&lt;&#x2F;code&gt; trait.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Important: As of April 2025, the &lt;code&gt;Stream&lt;&#x2F;code&gt; trait is not yet in stable Rust.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;futures-as-streams-with-once&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#futures-as-streams-with-once&quot; aria-label=&quot;Anchor link for: futures-as-streams-with-once&quot;&gt;Futures as streams with &lt;code&gt;Once&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Every future &lt;code&gt;Fut&lt;&#x2F;code&gt; can be converted into a stream by returning &lt;code&gt;Some(Fut::Output)&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Once&amp;lt;Fut&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;future&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Fut&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Fut: Future&amp;gt; Stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Once&amp;lt;Fut&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Fut::Output;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;poll_next&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: Pin&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;cx&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Context&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) -&amp;gt; Poll&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; this &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;project&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; this.future.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_pin_mut&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(fut) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ready!(fut.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span&gt;(cx)),
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Poll::Ready(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;      };
&lt;&#x2F;span&gt;&lt;span&gt;      this.future.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      Poll::Ready(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(v))
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, &lt;code&gt;ready!&lt;&#x2F;code&gt; converts &lt;code&gt;Poll&lt;&#x2F;code&gt; into &lt;code&gt;Option&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;functional-building-block-map&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#functional-building-block-map&quot; aria-label=&quot;Anchor link for: functional-building-block-map&quot;&gt;Functional building block &lt;code&gt;Map&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Let’s look at a simple example from the “semi-standard” library crate &lt;code&gt;futures&lt;&#x2F;code&gt;: the &lt;code&gt;map&lt;&#x2F;code&gt; combinator. This combinator just maps the items of an input stream and returns an new output stream (while consuming the input stream.)&lt;&#x2F;p&gt;
&lt;p&gt;The combinator’s source code looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Map&amp;lt;St, F&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;: St,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: F,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;St, F&amp;gt; Stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Map&amp;lt;St, F&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    St: Stream,
&lt;&#x2F;span&gt;&lt;span&gt;    F: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;FnMut&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;St::&lt;&#x2F;span&gt;&lt;span&gt;Item&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;F::Output;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;poll_next&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: Pin&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;cx&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Context&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) -&amp;gt; Poll&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item&amp;gt;&amp;gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ignore the field attribute &lt;code&gt;pin&lt;&#x2F;code&gt; for now.&lt;&#x2F;p&gt;
&lt;p&gt;The definition of &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;latest&#x2F;futures&#x2F;stream&#x2F;struct.Map.html&quot;&gt;&lt;code&gt;map&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and all the behaviour that we expect from a &lt;code&gt;map&lt;&#x2F;code&gt; function essentially boils down to storing two things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The original input stream.&lt;&#x2F;li&gt;
&lt;li&gt;The function or closure that maps elements of the input stream.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Then the authors of &lt;code&gt;futures&lt;&#x2F;code&gt; had to implement the single required method of the &lt;code&gt;Stream&lt;&#x2F;code&gt; trait: &lt;code&gt;poll_next&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;St, F&amp;gt; Stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Map&amp;lt;St, F&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    St: Stream,
&lt;&#x2F;span&gt;&lt;span&gt;    F: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;FnMut&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;St::&lt;&#x2F;span&gt;&lt;span&gt;Item&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;F::Output;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;poll_next&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: Pin&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;cx&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Context&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) -&amp;gt; Poll&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; this &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;project&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; res &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ready!(this.stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;as_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;poll_next&lt;&#x2F;span&gt;&lt;span&gt;(cx));
&lt;&#x2F;span&gt;&lt;span&gt;        Poll::Ready(res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| this.f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;call_mut&lt;&#x2F;span&gt;&lt;span&gt;(x)))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At the beginning of the &lt;code&gt;poll_next&lt;&#x2F;code&gt; function, only a &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;&#x2F;code&gt; is given. It has to be “undressed” to a mutable reference to the state object &lt;code&gt;Map&lt;&#x2F;code&gt;. This happens through a process called &lt;strong&gt;projection&lt;&#x2F;strong&gt;, which is essentially just calling &lt;code&gt;get_mut&lt;&#x2F;code&gt; on &lt;code&gt;Pin&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;projecting-with-pin-project-optional&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#projecting-with-pin-project-optional&quot; aria-label=&quot;Anchor link for: projecting-with-pin-project-optional&quot;&gt;Projecting with &lt;code&gt;pin_project&lt;&#x2F;code&gt; (optional)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Almost any library I encountered uses the &lt;code&gt;pin_project&lt;&#x2F;code&gt; crate which provides the &lt;code&gt;#[pin]&lt;&#x2F;code&gt; field attribute that I asked you to ignore. The &lt;code&gt;pin_project&lt;&#x2F;code&gt; crate takes care of two things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You don’t have to call &lt;code&gt;Box::pin&lt;&#x2F;code&gt; yourself or &lt;code&gt;pin_mut!&lt;&#x2F;code&gt; inside the constructor function of your aggregated stream.&lt;&#x2F;li&gt;
&lt;li&gt;You get a &lt;code&gt;project&lt;&#x2F;code&gt; function which allows you to call &lt;code&gt;as_mut()&lt;&#x2F;code&gt; (equivalent to &lt;code&gt;get_mut()&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Remark&lt;&#x2F;strong&gt;: Internally (if I read the code correctly), &lt;code&gt;pin_project&lt;&#x2F;code&gt; makes use of several &lt;code&gt;unsafe&lt;&#x2F;code&gt; function calls of the &lt;code&gt;Pin&lt;&#x2F;code&gt; type. This is not that strange, considering that most of the standard library is written in &lt;code&gt;unsafe&lt;&#x2F;code&gt;. On the other hand, using &lt;code&gt;Box::pin&lt;&#x2F;code&gt; will not have a significant performance impact and it does not require a macro from an external crate.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;stream-combinators&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#stream-combinators&quot; aria-label=&quot;Anchor link for: stream-combinators&quot;&gt;Stream combinators&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I will now focus on more complicated stream combinators. These are functions that take one or more input streams and output an output stream. I will call such higher-order functions &lt;strong&gt;stream combinators&lt;&#x2F;strong&gt; from now on.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Remark: The &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;futures-rx&quot;&gt;&lt;code&gt;futures-rx&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate is a good crate to look for if you want to save time and just use combinators made by someone else.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;flattening-nested-streams&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#flattening-nested-streams&quot; aria-label=&quot;Anchor link for: flattening-nested-streams&quot;&gt;Flattening nested streams&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;futures&lt;&#x2F;code&gt; crate has several types of flatten functions for nested streams. Nested streams are Rust data types &lt;code&gt;S&lt;&#x2F;code&gt; with a trait bound &lt;code&gt;S: Stream&amp;lt;Item: Stream&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You could separate flatten combinators in two categories: sequential or concurrent.&lt;&#x2F;p&gt;
&lt;p&gt;Sequential flatten combinators will never yield values from multiple inner streams at the same time.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flatten&lt;&#x2F;code&gt;: flattens the outer stream by pasting the output from the inner streams consecutively. This is usually not what you want, since most streams are infinite and you don’t want to block the outer stream.&lt;&#x2F;li&gt;
&lt;li&gt;A “forgetful” flatten (also called &lt;code&gt;switch&lt;&#x2F;code&gt; in RxJs): a kind of flatten of nested streams that only polls the most recent stream that arrived on the outer stream. This is implemented by &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures-rx&#x2F;0.2.1&#x2F;futures_rx&#x2F;stream_ext&#x2F;trait.RxExt.html#method.switch_map&quot;&gt;&lt;code&gt;switch_map&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; in &lt;code&gt;futures-rx&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Concurrent flatten combinators will combine values from multiple inner streams:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Concurrent &lt;code&gt;flatten_unordered(None)&lt;&#x2F;code&gt;: flattens by merging as many inner streams as possible, as they arrive on the outer stream. This might seems like a useful function, but it often not what you want.&lt;&#x2F;li&gt;
&lt;li&gt;Buffered concurrent &lt;code&gt;flatten_unordered(Some(N))&lt;&#x2F;code&gt;: flattens up-to N different inner streams.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Keep in mind that you can also use the &lt;code&gt;select_all&lt;&#x2F;code&gt; function from &lt;code&gt;futures::stream&lt;&#x2F;code&gt; to flatten in the situation where your outer stream is not a real stream but a finite iterable of streams.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-stream-of-arcs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-stream-of-arcs&quot; aria-label=&quot;Anchor link for: a-stream-of-arcs&quot;&gt;A stream of &lt;code&gt;Arc&lt;&#x2F;code&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Sometimes you might want to use the items yielded by a single stream in several places simultaneously. You could wrap all the items yielded by the input stream inside a shared reference &lt;code&gt;Arc&lt;&#x2F;code&gt;. The disadvantage of this approach is that you need (a limited form of) garbage cleaning by reference counting.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;futures-rx&lt;&#x2F;code&gt; crate exposes a &lt;code&gt;share&lt;&#x2F;code&gt; method that can be used for splitting an input stream.&lt;&#x2F;p&gt;
&lt;p&gt;Looking at the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures-rx&#x2F;0.2.1&#x2F;futures_rx&#x2F;stream_ext&#x2F;trait.RxExt.html#method.share&quot;&gt;docs&lt;&#x2F;a&gt;, there is an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;futures::{stream::{StreamExt, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;}, future::join};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;futures_rx::{Notification, RxExt};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;stream::iter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;share&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sub_stream_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;event); 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sub_stream_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;event); 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!((vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;], vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;]), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(sub_stream_a.collect::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;(), sub_stream_b.collect::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;()).await);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;event&lt;&#x2F;code&gt;s yielded by the shared stream seem to be wrappers around &lt;code&gt;Arc&amp;lt;usize&amp;gt;&lt;&#x2F;code&gt;. Since &lt;code&gt;usize&lt;&#x2F;code&gt; is &lt;code&gt;Copy&lt;&#x2F;code&gt;, &lt;code&gt;*event&lt;&#x2F;code&gt; is treated as &lt;code&gt;&amp;amp;usize&lt;&#x2F;code&gt; and the referenced &lt;code&gt;usize&lt;&#x2F;code&gt; automically cloned.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Remark: Maybe I am wrong?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-stream-of-clones&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-stream-of-clones&quot; aria-label=&quot;Anchor link for: a-stream-of-clones&quot;&gt;A stream of clones&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;share&lt;&#x2F;code&gt; operator on streams from &lt;code&gt;futures-rx&lt;&#x2F;code&gt; seems to put all values on the input stream inside a reference-counted &lt;code&gt;Arc&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I wanted to derive several output streams from the input stream that yielded clones directly without reference counting.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Remark: Maybe I could just have used &lt;code&gt;share&lt;&#x2F;code&gt; and then cloned every element?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I decided to implement a separate stream cloning trait in a crate &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;clone-stream&quot;&gt;&lt;code&gt;clone-stream&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. The high-level API of this crate is quite simple. It is just a call to &lt;code&gt;fork&lt;&#x2F;code&gt; and then &lt;code&gt;stream.clone()&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;clone_stream::ForkStream;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;futures::{FutureExt, StreamExt, stream};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; non_clone_stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;stream::iter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; clone_stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; non_clone_stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fork&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; cloned_stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; clone_stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Remark: There exist a few other crates that are similar.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;stucture-of-the-clone-stream-crate&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#stucture-of-the-clone-stream-crate&quot; aria-label=&quot;Anchor link for: stucture-of-the-clone-stream-crate&quot;&gt;Stucture of the &lt;code&gt;clone-stream&lt;&#x2F;code&gt; crate&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I called the shared state of all the clones of an input stream &lt;code&gt;Fork&lt;&#x2F;code&gt;. The output streams that can be cloned are called &lt;code&gt;CloneStream&lt;&#x2F;code&gt;. The input stream is called &lt;code&gt;BaseStream&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The fork is a combination of a queue of unprocessed items and a map of the state machines of the &lt;code&gt;CloneStream&lt;&#x2F;code&gt;s:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Fork&amp;lt;BaseStream&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    where  BaseStream: Stream&amp;lt;Item: Clone&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;base_stream&lt;&#x2F;span&gt;&lt;span&gt;: Pin&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;BaseStream&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span&gt;: BTreeMap&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;BaseStream::&lt;&#x2F;span&gt;&lt;span&gt;Item&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;clones&lt;&#x2F;span&gt;&lt;span&gt;: BTreeMap&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, CloneState&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;next_clone_index&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;next_queue_index&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Every &lt;code&gt;CloneStream&lt;&#x2F;code&gt; registers at the shared &lt;code&gt;Fork&lt;&#x2F;code&gt; and receives a unique identifier.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; min_available &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.next_clone_index;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.clones.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(min_available, CloneState::default());
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.next_clone_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    min_available
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then &lt;code&gt;Fork&lt;&#x2F;code&gt; creates an entry for the &lt;code&gt;CloneStream&lt;&#x2F;code&gt; in a map containing the states of all &lt;code&gt;CloneStream&lt;&#x2F;code&gt;. The default entry is just &lt;code&gt;NeverPolled&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As soon as the &lt;code&gt;CloneStream&lt;&#x2F;code&gt; is polled, the poll call is forwarded to the &lt;code&gt;Fork&lt;&#x2F;code&gt; together with the waker provided by the async runtime. The &lt;code&gt;Fork&lt;&#x2F;code&gt; will look at the current state of the state machine associated to &lt;code&gt;CloneStream&lt;&#x2F;code&gt; by using it’s idea. Depending on the state it will:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Pop an item from a shared item queue and return it to &lt;code&gt;CloneStream&lt;&#x2F;code&gt;.When there are still other &lt;code&gt;CloneStream&lt;&#x2F;code&gt; waiting and sleeping, just clone from the heap.&lt;&#x2F;li&gt;
&lt;li&gt;Poll the input stream and return pending&lt;&#x2F;li&gt;
&lt;li&gt;Poll the input stream, receive ready, push on queue if other &lt;code&gt;CloneStream&lt;&#x2F;code&gt;s are sleeping, return item.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After each step, the state machine of the &lt;code&gt;CloneStream&lt;&#x2F;code&gt; is advanced by the &lt;code&gt;Fork&lt;&#x2F;code&gt; in its map.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;general-approach-building-combinators&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#general-approach-building-combinators&quot; aria-label=&quot;Anchor link for: general-approach-building-combinators&quot;&gt;General approach building combinators&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Usually, a combinator has some kind of internal state. You can choose between:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;using an implicit state defined with &lt;code&gt;unfold&lt;&#x2F;code&gt; or&lt;&#x2F;li&gt;
&lt;li&gt;creating a new data type that represents the state explicitly.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you decide on the last approach, you can use the “state” data type as a handle for useful helper methods.&lt;&#x2F;p&gt;
&lt;p&gt;Do not forget to give the helper methods (where appropriate) a &lt;code&gt;Waker&lt;&#x2F;code&gt; argument. This argument can be used by the helper methods to store the waker in case some source is unavailable and wake up the relevant sleeping tasks in case the source becomes ready in future.&lt;&#x2F;p&gt;
&lt;p&gt;Only the latest &lt;code&gt;Waker&lt;&#x2F;code&gt; passed to &lt;code&gt;poll&lt;&#x2F;code&gt; is stored (at least for most futures in the wild). If you want multiple tasks to be woken from sleep by the latest passed waker, you have to build your own wrapper waker that will wake all relevant sleeping tasks.&lt;&#x2F;p&gt;
&lt;p&gt;To make your own waker you can use the &lt;code&gt;unsafe&lt;&#x2F;code&gt; &lt;code&gt;RawWaker&lt;&#x2F;code&gt;, but that requires you to specify low-level behaviour that is already provided by any asynchronous runtime. Instead, create a simple struct definition that contains the wakers you need and implement the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;task&#x2F;trait.Wake.html&quot;&gt;&lt;code&gt;Wake&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; trait for that struct.&lt;&#x2F;p&gt;
&lt;p&gt;For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;SleepWaker {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;wakers&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Waker&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Wake &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;SleepWaker {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;wake&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: Arc&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.wakers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;(Waker::wake_by_ref);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After writing all your helper methods (that operate on some shared internal state), the only task that remains is to implement the &lt;code&gt;poll_next&lt;&#x2F;code&gt; method for the &lt;code&gt;Stream&lt;&#x2F;code&gt; trait. The body of this implementation can then make use of the helper functions on the “state” data type.&lt;&#x2F;p&gt;
&lt;p&gt;As you can see in &lt;code&gt;clone-stream&lt;&#x2F;code&gt;, the &lt;code&gt;poll_next&lt;&#x2F;code&gt;-method of the output &lt;code&gt;CloneStream&lt;&#x2F;code&gt;s just calls methods defined previously on the internal shared object (the &lt;code&gt;Fork&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;BaseStream&amp;gt; Stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;CloneStream&amp;lt;BaseStream&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    BaseStream: Stream&amp;lt;Item: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Clone&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;BaseStream::Item;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;poll_next&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: Pin&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;current_task&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; Context) -&amp;gt; Poll&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; waker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; current_task.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;waker&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; fork &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.fork.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        fork.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;poll_clone&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.id, waker)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;testing-your-async-combinators&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#testing-your-async-combinators&quot; aria-label=&quot;Anchor link for: testing-your-async-combinators&quot;&gt;Testing your async combinators&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Do not spend time on mocking an asynchronous runtime in your tests, because you will end up building your own buggy runtime which needs its own test suite.&lt;&#x2F;p&gt;
&lt;p&gt;If you do not care much about the ordering of events, you can just use the &lt;code&gt;ThreadPool&lt;&#x2F;code&gt; from &lt;code&gt;futures&lt;&#x2F;code&gt; to create a barebones async runtime on which you can spawn async tasks. In this way you can already test a lot of invariants of your homegrown async combinator.&lt;&#x2F;p&gt;
&lt;p&gt;If you are testing the ordering of events, you should use a run-time with a notion of time (the most common one is Tokio). Then you can test your code with time-outs using the &lt;code&gt;select!&lt;&#x2F;code&gt;-macro. Do not forget to account for situations in which parts of the system are dropped or futures cancelled. See the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wvhulle&#x2F;clone-stream&#x2F;tree&#x2F;main&#x2F;tests&quot;&gt;tests of &lt;code&gt;clone-stream&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In case you are worried about the size of an additional async runtime dependency, you can add the dependency as a “dev-dependency”-only to keep your core library code light and easy to distribute.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Role of coroutines</title>
        <published>2025-04-01T00:00:00+00:00</published>
        <updated>2025-04-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Willem Vanhulle
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willemvanhulle.tech/blog/streams/coroutines/"/>
        <id>https://willemvanhulle.tech/blog/streams/coroutines/</id>
        
        <content type="html" xml:base="https://willemvanhulle.tech/blog/streams/coroutines/">&lt;p&gt;In some other posts on this site, you will find ways to create streams from scratch and how to combine them. This post will be about the relationship between the concept of a &lt;code&gt;Stream&lt;&#x2F;code&gt; (or asynchronous iterator) and the other, more familiar, functions present in most programming languages.&lt;&#x2F;p&gt;
&lt;p&gt;Most of this post was inspired by a &lt;a href=&quot;https:&#x2F;&#x2F;without.boats&#x2F;blog&#x2F;poll-next&#x2F;&quot;&gt;post by without.boats&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;simple-coroutines&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#simple-coroutines&quot; aria-label=&quot;Anchor link for: simple-coroutines&quot;&gt;Simple coroutines&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;concept-of-a-coroutine&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#concept-of-a-coroutine&quot; aria-label=&quot;Anchor link for: concept-of-a-coroutine&quot;&gt;Concept of a coroutine&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Normal functions return output (immediately). They do it only once (or never).&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;strong&gt;coroutine&lt;&#x2F;strong&gt; is a special kind functions that can:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;be suspended multiple times&lt;&#x2F;li&gt;
&lt;li&gt;be resumed multiple times&lt;&#x2F;li&gt;
&lt;li&gt;return once&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;More specifically, at runtime, coroutines go through a process (with specific terminology):&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;When a coroutine suspends, it &lt;strong&gt;yield&lt;&#x2F;strong&gt;s a value to the caller. This is a kind of intermediate return value.&lt;&#x2F;li&gt;
&lt;li&gt;After observing (or ignoring) the yielded value, the caller can safely forget about the suspended coroutine (temporarily) and continue with other functions.&lt;&#x2F;li&gt;
&lt;li&gt;Later the caller can return to this suspended coroutine. The caller needs to resume the suspended coroutine to wake it up. This step is called &lt;strong&gt;resumption&lt;&#x2F;strong&gt;. For resumption some resumption data may need to be provided.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;These steps may repeat forever or until the coroutine ends by returning. Returning is distinct from yielding, since it is final. The return value is the last value that can be observed by the caller.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Remark&lt;&#x2F;strong&gt;: Coroutines are used internally by the Rust compiler while compiling asynchronous code. The compiler implements a form of “stack-less” co-routines for &lt;code&gt;async {}&lt;&#x2F;code&gt; code-blocks. These blocks are compiled implicitly into coroutines that yield at every &lt;code&gt;await&lt;&#x2F;code&gt;-point.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;directly-constructing-coroutines&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#directly-constructing-coroutines&quot; aria-label=&quot;Anchor link for: directly-constructing-coroutines&quot;&gt;Directly constructing coroutines&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;Coroutine&lt;&#x2F;code&gt; trait definition is an extension of the &lt;code&gt;Future&lt;&#x2F;code&gt; trait:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;Coroutine&amp;lt;Resume = ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Yield;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Return;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;resume&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: Pin&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;resumption&lt;&#x2F;span&gt;&lt;span&gt;: Resume,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; CoroutineState&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Yield, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Return&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that we need &lt;code&gt;Pin&lt;&#x2F;code&gt;, similarly to &lt;code&gt;Future&lt;&#x2F;code&gt;. This is because coroutines may be self-referential. The &lt;code&gt;resume&lt;&#x2F;code&gt; function should only be called on coroutines that may move (are &lt;code&gt;Unpin&lt;&#x2F;code&gt;). The reason is probably that they should extend the behaviour of &lt;code&gt;Future&lt;&#x2F;code&gt;s which do require &lt;code&gt;Pin&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Important&lt;&#x2F;strong&gt;: The &lt;code&gt;Coroutine&lt;&#x2F;code&gt; trait in Rust is unstable and only available on nightly as of April 2025.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you look carefully at the &lt;code&gt;Coroutine&lt;&#x2F;code&gt; trait you could see that (in pseudo-code):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;Output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; = &lt;&#x2F;span&gt;&lt;span&gt;Coroutine&amp;lt;
&lt;&#x2F;span&gt;&lt;span&gt;    Resume = Context, 
&lt;&#x2F;span&gt;&lt;span&gt;    Yield = (), 
&lt;&#x2F;span&gt;&lt;span&gt;    Return = Output
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;More precisely, a future is a coroutine that yields nothing when suspended. A future needs a &lt;code&gt;Context&lt;&#x2F;code&gt; (containing a &lt;code&gt;Waker&lt;&#x2F;code&gt;) to be resumed or woken.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Remark&lt;&#x2F;strong&gt;: The resumption data is provided by a asynchronous run-time to schedule &lt;code&gt;resume&lt;&#x2F;code&gt;s in an efficient way.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;example-of-a-coroutine&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#example-of-a-coroutine&quot; aria-label=&quot;Anchor link for: example-of-a-coroutine&quot;&gt;Example of a coroutine&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The Rust docs contain an example of a coroutine. The coroutine does not need any resumption data, but it yields a number and returns a string on completion:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; coroutine &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;coroutine&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c82829;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;foo&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To use this &lt;code&gt;coroutine&lt;&#x2F;code&gt;, we have to provide an initial chunk of resumption data. By default this is the empty tuple &lt;code&gt;()&lt;&#x2F;code&gt;. The resumption data is passed to the &lt;code&gt;resume&lt;&#x2F;code&gt; function and used to anticipate the first yield. The first (and last) yield is &lt;code&gt;yield 1&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;Pin::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; coroutine).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;resume&lt;&#x2F;span&gt;&lt;span&gt;(()) {
&lt;&#x2F;span&gt;&lt;span&gt;    CoroutineState::Yielded(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;panic!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;unexpected return from resume&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The next time &lt;code&gt;resume&lt;&#x2F;code&gt; is called, no yield is encountered and the final return value is returned (a string).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;Pin::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; coroutine).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;resume&lt;&#x2F;span&gt;&lt;span&gt;(()) {
&lt;&#x2F;span&gt;&lt;span&gt;    CoroutineState::Returned(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;panic!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;unexpected return from resume&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If our coroutine was a &lt;code&gt;Future&lt;&#x2F;code&gt;, then &lt;code&gt;resume&lt;&#x2F;code&gt; would expect a &lt;code&gt;Context&lt;&#x2F;code&gt; with a &lt;code&gt;Waker&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;classification-of-coroutines&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#classification-of-coroutines&quot; aria-label=&quot;Anchor link for: classification-of-coroutines&quot;&gt;Classification of coroutines&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Reflecting on the concepts of an iterator, future and stream, we can say that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;An &lt;strong&gt;iterator&lt;&#x2F;strong&gt; is coroutine that yields an &lt;code&gt;Option&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;strong&gt;future&lt;&#x2F;strong&gt; is a coroutine that resumes with a &lt;code&gt;Waker&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;strong&gt;stream&lt;&#x2F;strong&gt; is an iterator that resumes with a &lt;code&gt;Waker&lt;&#x2F;code&gt; and yields an &lt;code&gt;Option&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Coroutines are a generalisation of these cases, which can be layed-out in a table:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;em&gt;YIELDS&lt;&#x2F;em&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;em&gt;RESUMES&lt;&#x2F;em&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;em&gt;RETURNS&lt;&#x2F;em&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Iterator&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Option&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;!&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;!&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Future&lt;&#x2F;code&gt;, &lt;code&gt;AsyncFn&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Waker&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Any&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Stream&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Option&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Waker&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;!&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Coroutine&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Any&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Any&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Any&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;In this table, the &lt;code&gt;!&lt;&#x2F;code&gt; symbol stands for &lt;code&gt;never&lt;&#x2F;code&gt;, the type that does not have any runtime value. In other words, &lt;code&gt;never&lt;&#x2F;code&gt; is not constructible. It is used often as the return time of non-terminating functions like infinite loops.&lt;&#x2F;p&gt;
&lt;p&gt;For a practical introduction to coroutines in Rust, I recommend &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PacktPublishing&#x2F;Asynchronous-Programming-in-Rust&quot;&gt;Asynchronous Programming in Rust&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Functional async</title>
        <published>2025-03-18T00:00:00+00:00</published>
        <updated>2025-03-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Willem Vanhulle
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willemvanhulle.tech/blog/streams/func-async/"/>
        <id>https://willemvanhulle.tech/blog/streams/func-async/</id>
        
        <content type="html" xml:base="https://willemvanhulle.tech/blog/streams/func-async/">&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#introduction&quot; aria-label=&quot;Anchor link for: introduction&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s get started with some definitions you may have heard about already.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Declarative programming&lt;&#x2F;strong&gt; is when you write code and make sure that the inputs and outputs of sub-modules behave predictably according to fixed invariants. Logic or constraint solver languages like Prolog or &lt;a href=&quot;https:&#x2F;&#x2F;manyworlds.site&#x2F;&quot;&gt;ManyWorlds&lt;&#x2F;a&gt; (written by my friend &lt;a href=&quot;https:&#x2F;&#x2F;jodevriendt.com&quot;&gt;Jo Devriendt&lt;&#x2F;a&gt;) are part of this family.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Functional programming&lt;&#x2F;strong&gt; is building the majority of your code from well-defined and side-effect-free functions. It is a sub-set of declarative programming. Languages like ML, Haskell, OCaml, Lisp are part of this family. They are all extensions of Lambda Calculus.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Asynchronous programming&lt;&#x2F;strong&gt; is a kind of programming where you not only have functions that evaluate immediately, but there are also functions that &lt;em&gt;may evaluate in the future&lt;&#x2F;em&gt;. Such functions are called asynchronous functions. JavaScript, C#, and Rust are examples.&lt;&#x2F;p&gt;
&lt;p&gt;In the following, I will show how declarative, functional, and asynchronous programming can be combined in the Rust programming language with the semi-standard library crate &lt;code&gt;futures&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;use-cases&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#use-cases&quot; aria-label=&quot;Anchor link for: use-cases&quot;&gt;Use-cases&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Normal imperative asynchronous programming contains a combination of the &lt;code&gt;async&lt;&#x2F;code&gt;, &lt;code&gt;await&lt;&#x2F;code&gt; keywords with imperative keywords like &lt;code&gt;while&lt;&#x2F;code&gt;, &lt;code&gt;loop&lt;&#x2F;code&gt;, or &lt;code&gt;continue&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To illustrate where functional asynchronous programming would be useful, I will give a few examples.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;channels&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#channels&quot; aria-label=&quot;Anchor link for: channels&quot;&gt;Channels&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;One approach that you might take when dealing with different sub-modules in a large project is using channels to communicate between the different modules.&lt;&#x2F;p&gt;
&lt;p&gt;This could look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(tx, rx) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;channel::new();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(broadcast_tx, broadcast_rx) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;broadcast_channel&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; forward_task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span&gt;(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; rx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;recv&lt;&#x2F;span&gt;&lt;span&gt;().await;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; result {
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(input) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;get_output&lt;&#x2F;span&gt;&lt;span&gt;(input);
&lt;&#x2F;span&gt;&lt;span&gt;               broadcast_tx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(output).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;           }
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, I use “watch” and “broadcast” channels from the Tokio crate.&lt;&#x2F;p&gt;
&lt;p&gt;If we would translate this to a functional asynchronous version, we get:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(sender, receiver) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;channel::new();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(broadcast_sender, broadcast_receiver) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;broadcast_channel&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; forward_task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;   async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;       receiver
&lt;&#x2F;span&gt;&lt;span&gt;           .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;::ok)
&lt;&#x2F;span&gt;&lt;span&gt;           .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;filter_map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;| result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;           .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(get_output)
&lt;&#x2F;span&gt;&lt;span&gt;           .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;forward&lt;&#x2F;span&gt;&lt;span&gt;(broadcast_sender)
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So what happened during the translation?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Replace the channel receiver with an implementor of the trait &lt;code&gt;Stream&lt;&#x2F;code&gt; from &lt;code&gt;futures&lt;&#x2F;code&gt;. A &lt;strong&gt;stream&lt;&#x2F;strong&gt; is just something that produces data at possibly irregular intervals. A channel receiver is an example of this.&lt;&#x2F;li&gt;
&lt;li&gt;Replace the channel sender with a type implementing the &lt;code&gt;Sink&lt;&#x2F;code&gt; trait from &lt;code&gt;futures&lt;&#x2F;code&gt;. A &lt;strong&gt;sink&lt;&#x2F;strong&gt; is something that receives data, agnostic from the transport or channel used. An implementor of the &lt;code&gt;Sink&lt;&#x2F;code&gt; is something in which you can put data and flush it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Redirect&lt;&#x2F;strong&gt; the stream into the sink with &lt;code&gt;forward&lt;&#x2F;code&gt;. This process could be seen as “flushing” the stream into the sink. However, the &lt;code&gt;flush&lt;&#x2F;code&gt; name is already taken by the &lt;code&gt;flush&lt;&#x2F;code&gt; method of the &lt;code&gt;Sink&lt;&#x2F;code&gt; trait.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;By shifting the focus from input, intermediate, and output variables to transformations with &lt;code&gt;map&lt;&#x2F;code&gt;, we replaced N imperative variables in the loop by N-1 &lt;strong&gt;functional&lt;&#x2F;strong&gt; closures passed to &lt;code&gt;map&lt;&#x2F;code&gt;. You could still argue that the variables did not really disappear, but they are now hidden in the closures and the code is more readable.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Remark: JavaScript frameworks for building web-apps usually call &lt;code&gt;sink&lt;&#x2F;code&gt; a “signal” or “writable observable”. The &lt;code&gt;gstremar-rs&lt;&#x2F;code&gt; crate also has “sinks” but they are not directly related to the “sinks” in &lt;code&gt;futures&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reactive-ui-input&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#reactive-ui-input&quot; aria-label=&quot;Anchor link for: reactive-ui-input&quot;&gt;Reactive UI input&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Another place where functional asynchronous programming is useful is on the frontend.&lt;&#x2F;p&gt;
&lt;p&gt;An imperative version might look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; target_temperature &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;21.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;slider.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;on_slide&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;acceptable&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new_t&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_target &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;some_op&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;new_t&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;       target_temperature &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; new_target;
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Although this particular example is small, writing large amounts of a large codebase in this style could introduce problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It introduces a lot of indentation. A developer who is new to the codebase might feel intimidated by the indentation. After careful consideration, he might decide to add his own logic on top of the existing code and then split the whole thing up into smaller chunks, thinking he improves readability, but actually breaking sequential readability.&lt;&#x2F;li&gt;
&lt;li&gt;By using an &lt;code&gt;if&lt;&#x2F;code&gt; statement, you also create multiple branches. The reader or maintainer has to know that the &lt;code&gt;else&lt;&#x2F;code&gt; branch is irrelevant in this particular case. A call to &lt;code&gt;StreamExt::filter&lt;&#x2F;code&gt; already conveys the message that the &lt;code&gt;true&lt;&#x2F;code&gt; branch is the only one that matters.&lt;&#x2F;li&gt;
&lt;li&gt;A maintainer also has to keep track of one more variable &lt;code&gt;new_t&lt;&#x2F;code&gt; (the argument to the closure). The naming of intermediate variables (variables for data that appears before or after a computation) is hard, and names like &lt;code&gt;old_t&lt;&#x2F;code&gt;, &lt;code&gt;new_t&lt;&#x2F;code&gt;, or &lt;code&gt;updated_t&lt;&#x2F;code&gt; are not helpful for the reader.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The imperative version can be translated to a functional version like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; target_temperature &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;MySink::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;21.0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;slider.value
&lt;&#x2F;span&gt;&lt;span&gt;   .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(acceptable)
&lt;&#x2F;span&gt;&lt;span&gt;   .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(some_op)
&lt;&#x2F;span&gt;&lt;span&gt;   .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;forward&lt;&#x2F;span&gt;&lt;span&gt;(target_temperature);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;MySink::new(21.0)&lt;&#x2F;code&gt; is a call to the constructor of &lt;code&gt;MySink&lt;&#x2F;code&gt;, an imaginary object that implements the &lt;code&gt;Sink&lt;&#x2F;code&gt; trait.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;clear-benefits&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#clear-benefits&quot; aria-label=&quot;Anchor link for: clear-benefits&quot;&gt;Clear benefits&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Instead of exposing variables names for input, intermediate, and output variables, we omit them and focus on naming the transformations themselves. This way of dealing with computation is closer to how we communicate in natural language using verbs.&lt;&#x2F;p&gt;
&lt;p&gt;Another benefit of the functional approach is that it does not rely on a concrete type. If you are stuck in the middle of writing a module to provide a &lt;code&gt;Stream&lt;&#x2F;code&gt; but you also have to write something that consumes it, you can just continue with the last one.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;MyStream {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;MyStream {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;       unimplemented!()
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;MyStream {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;poll_next&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Poll&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;       unimplemented!()
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You could then already start with another module that consumes it. But instead of directly depending on &lt;code&gt;MyStream&lt;&#x2F;code&gt;, you can just depend on the &lt;code&gt;Stream&lt;&#x2F;code&gt; trait. This way, you can write your code without having to know the implementation details of &lt;code&gt;MyStream&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;MyConsumer {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;MyConsumer {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;consume&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;: impl Stream&amp;lt;Item = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; We can start already!
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The important part is &lt;code&gt;impl Stream&amp;lt;Item = i32&amp;gt;&lt;&#x2F;code&gt;. This means that the &lt;code&gt;consume&lt;&#x2F;code&gt; function can take any type that implements the &lt;code&gt;Stream&lt;&#x2F;code&gt; trait and produces &lt;code&gt;i32&lt;&#x2F;code&gt; items.&lt;&#x2F;p&gt;
&lt;p&gt;We have separated the problem into two levels of abstraction that can be dealt with independently and simultaneously:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;trait&lt;&#x2F;strong&gt; level: describes the invariants and properties of inputs and outputs. Working on this level in Rust is accomplished using the &lt;code&gt;impl Trait&lt;&#x2F;code&gt; syntax.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;strong&gt;concrete type&lt;&#x2F;strong&gt; level: describes the transport, the speed, the efficiency, the logic. For a concrete type, you will have to either:&lt;&#x2F;li&gt;
&lt;li&gt;Pick an implementor from a public crate (like &lt;code&gt;futures&lt;&#x2F;code&gt; or &lt;code&gt;tokio&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Write your own implementor of the &lt;code&gt;Stream&lt;&#x2F;code&gt; trait. This is a bit more work, but it is not that hard. I will show you how to do this later on.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As of April 2025, the traits &lt;code&gt;Stream&lt;&#x2F;code&gt; and &lt;code&gt;Sink&lt;&#x2F;code&gt; are used universally by crates published on &lt;a href=&quot;https:&#x2F;&#x2F;willemvanhulle.tech&#x2F;blog&#x2F;streams&#x2F;func-async&#x2F;crates.io&quot;&gt;crates.io&lt;&#x2F;a&gt;. If you make use of these traits, which describe a common behavior, and implement them for your own types, you make your code more interoperable with the rest of the world.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;&#x2F;strong&gt;: It is important to know while using Rust that it is not required to know everything about &lt;code&gt;Pin&lt;&#x2F;code&gt; or &lt;code&gt;Poll&lt;&#x2F;code&gt;. You can just use the high-level methods provided by the standard library and &lt;code&gt;futures&lt;&#x2F;code&gt; crate.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;streams&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#streams&quot; aria-label=&quot;Anchor link for: streams&quot;&gt;Streams&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;relationship-with-iterators&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#relationship-with-iterators&quot; aria-label=&quot;Anchor link for: relationship-with-iterators&quot;&gt;Relationship with iterators&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The main thing that is added in functional asynchronous programming is the &lt;code&gt;Stream&lt;&#x2F;code&gt; trait. You are supposed to use it everywhere. There are other things of course, but this is the main concept that you will need.&lt;&#x2F;p&gt;
&lt;p&gt;So what is a &lt;strong&gt;stream&lt;&#x2F;strong&gt;? It is just something that implements the &lt;code&gt;Stream&lt;&#x2F;code&gt; trait from the &lt;code&gt;futures&lt;&#x2F;code&gt; crate. It nothing more than an asynchronous iterator.&lt;&#x2F;p&gt;
&lt;p&gt;A rough conceptual definition of a stream would be:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A function that returns multiple values at unpredictable times.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;First, remember that the life-time of an iterator (a normal synchronous blocking one) looks like this:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;T&lt;&#x2F;th&gt;&lt;th&gt;create&lt;&#x2F;th&gt;&lt;th&gt;iterate&lt;&#x2F;th&gt;&lt;th&gt;yield&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;(1..=10)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;next()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Some(1)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;next()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;…&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;next()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;None&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;next()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Some(2)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Notice that calling &lt;code&gt;next&lt;&#x2F;code&gt; after the iterator yielded &lt;code&gt;None&lt;&#x2F;code&gt; may result in a new &lt;code&gt;Some&lt;&#x2F;code&gt;. If you do not want that, apply &lt;code&gt;fuse&lt;&#x2F;code&gt; to the iterator to obtain a &lt;code&gt;FusedIterator&lt;&#x2F;code&gt; that will keep yielding &lt;code&gt;None&lt;&#x2F;code&gt; after the first &lt;code&gt;None&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The life-time of a stream&#x2F;async iterator during usage looks like this:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;T&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;Creation&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;Iteration&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;Yielted&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;St::new()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;next()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;await&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Some(1)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;next()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;…&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;await&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Some(2)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;next()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;None&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The lifecycle of an async iterator (stream) is longer than a normal iterator since it requires an &lt;code&gt;await&lt;&#x2F;code&gt; before a value is yielded.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;code&gt;FusedStream&lt;&#x2F;code&gt; is the async analogue of &lt;code&gt;FusedIterator&lt;&#x2F;code&gt; and will yield &lt;code&gt;None&lt;&#x2F;code&gt; after the first &lt;code&gt;None&lt;&#x2F;code&gt;. In addition, it has a non-async method &lt;code&gt;is_terminated&lt;&#x2F;code&gt; that says whether the stream is exhausted already.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;FusedStream: Stream {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;is_terminated&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Usually a &lt;code&gt;FusedStream&lt;&#x2F;code&gt; will yield &lt;code&gt;Poll::Ready(None)&lt;&#x2F;code&gt; after the first &lt;code&gt;Poll::Ready(None)&lt;&#x2F;code&gt; and it’s &lt;code&gt;is_terminated&lt;&#x2F;code&gt; method will be positive. However, the implementor has the freedom to break these conventions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;consuming-streams&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#consuming-streams&quot; aria-label=&quot;Anchor link for: consuming-streams&quot;&gt;Consuming streams&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Remark&lt;&#x2F;strong&gt;: As of April 2025, all the methods you need for streams are in &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;latest&#x2F;futures&#x2F;stream&#x2F;trait.StreamExt.html&quot;&gt;&lt;code&gt;StreamExt&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; from &lt;code&gt;futures&lt;&#x2F;code&gt;. For the rest of this article, almost all &lt;code&gt;Stream&lt;&#x2F;code&gt;-related methods come from this trait.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The simplest case would be the case where you just want to perform an operation for each element that is yielded by the stream. For this, you should use the &lt;code&gt;for_each&lt;&#x2F;code&gt; method to act on each item in &lt;code&gt;Some(item)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; fut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;stream::repeat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;   x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; item;
&lt;&#x2F;span&gt;&lt;span&gt;    future::ready(())
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;fut.await;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Observe that the argument for the closure in &lt;code&gt;for_each&lt;&#x2F;code&gt; does not take an &lt;code&gt;Option&lt;&#x2F;code&gt;. The stream returned by &lt;code&gt;for_each&lt;&#x2F;code&gt; is fused; it is an implementor of &lt;code&gt;FusedStream&lt;&#x2F;code&gt;. A &lt;code&gt;FusedStream&lt;&#x2F;code&gt; is a special type of stream that terminates as soon as one item yielded by the input stream is &lt;code&gt;None&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The futures that are evaluated while consuming the &lt;code&gt;for_each&lt;&#x2F;code&gt; will not overlap in execution. They will happen sequentially.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;for_each&lt;&#x2F;code&gt; will not do any work, unless it is &lt;strong&gt;driven&lt;&#x2F;strong&gt; by an asynchronous executor. The reason is that streams are &lt;em&gt;lazy&lt;&#x2F;em&gt;, just like normal iterators in Rust.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Very often we just have to apply one blocking, synchronous operation to every output item from an input stream and return a new stream with the mapped items. The &lt;code&gt;map&lt;&#x2F;code&gt; stream operator is the right tool for this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;stream::iter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When the operation in the closure is asynchronous you should use &lt;code&gt;then&lt;&#x2F;code&gt; (as in &lt;code&gt;Future::then&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;stream::iter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;convert&lt;&#x2F;span&gt;&lt;span&gt;(x).await });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Feel free to use async closures &lt;code&gt;async |_| {}&lt;&#x2F;code&gt; or &lt;code&gt;AsyncFn&lt;&#x2F;code&gt; in recent Rust versions. Asynchronous closures were only recently stabilized as of April 2025. Since I do not understand the implementation of async closures very well, I prefer to keep using the old syntax: &lt;code&gt;|x| async move {}&lt;&#x2F;code&gt; for now. This syntax works better with older versions of Rust.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Remark&lt;&#x2F;strong&gt;: In previous major version releases of &lt;code&gt;futures&lt;&#x2F;code&gt;, &lt;code&gt;then&lt;&#x2F;code&gt; and &lt;code&gt;map&lt;&#x2F;code&gt; were a single function. The crate &lt;code&gt;futures-preview&lt;&#x2F;code&gt; an old version. Avoid reading the documentation of &lt;code&gt;futures-preview&lt;&#x2F;code&gt; to prevent confusion. (Everything you need for the rest of this presentation is available in &lt;code&gt;futures &amp;gt;= 0.3.31&lt;&#x2F;code&gt;.)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;stream-test-helpers&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#stream-test-helpers&quot; aria-label=&quot;Anchor link for: stream-test-helpers&quot;&gt;Stream test helpers&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;While implementing your own streams (maybe not now but later on), you will run into situations where you need consume the streams as if you were a typical consumer. The &lt;code&gt;futures&lt;&#x2F;code&gt; crate provides helpers for tests that are analogous to the ones in &lt;code&gt;Iterator&lt;&#x2F;code&gt;. The only thing that distinguishes them is being &lt;strong&gt;operators on asynchronous iterators&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;The following &lt;code&gt;Stream&lt;&#x2F;code&gt; helpers &#x2F; operators take a stream and perform some simple actions on it without changing the values:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;skip_while&lt;&#x2F;code&gt;: Drops items from a stream while a condition is met (provided as a boolean closure on the items of the input stream).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;peekable&lt;&#x2F;code&gt;: Adds a &lt;code&gt;peek&lt;&#x2F;code&gt; method that can be used to preview a &lt;strong&gt;reference to the next item&lt;&#x2F;strong&gt; without consuming it (yet). This is useful when you don’t want to &lt;em&gt;step too fast&lt;&#x2F;em&gt; through the stream.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;take&lt;&#x2F;code&gt;: Simply skip a number of items from the beginning of the stream.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;enumerate&lt;&#x2F;code&gt;: Adds an increasing index to the items of stream, starting from the beginning.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For example, you can use &lt;code&gt;enumerate&lt;&#x2F;code&gt; as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;stream::iter(vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;b&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;c&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;().await, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)));
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;().await, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;b&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)));
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;().await, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;#39;c&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)));
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;().await, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;filtering-streams&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#filtering-streams&quot; aria-label=&quot;Anchor link for: filtering-streams&quot;&gt;Filtering streams&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You can filter a stream of numbers to only keep the even numbers as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::future::ready;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;futures::{stream, StreamExt};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;stream::iter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; events &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ready&lt;&#x2F;span&gt;&lt;span&gt;(x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice the &lt;code&gt;ready&lt;&#x2F;code&gt; function. This function maps primitive Rust values &lt;strong&gt;into the async world&lt;&#x2F;strong&gt;. The output of &lt;code&gt;ready&lt;&#x2F;code&gt; is a minimal &lt;code&gt;Future&lt;&#x2F;code&gt; that can be moved: it is &lt;strong&gt;&lt;code&gt;Unpin&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Remark&lt;&#x2F;strong&gt;: Don’t try to implement &lt;code&gt;ready&lt;&#x2F;code&gt; yourself, just import it from &lt;code&gt;std::future::ready&lt;&#x2F;code&gt;.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;boolean-operators&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#boolean-operators&quot; aria-label=&quot;Anchor link for: boolean-operators&quot;&gt;Boolean operators&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;futures&lt;&#x2F;code&gt; crate also provides analogues for the boolean operators shipped with the standard library &lt;code&gt;Iterator&lt;&#x2F;code&gt; such as &lt;code&gt;any&lt;&#x2F;code&gt;, &lt;code&gt;all&lt;&#x2F;code&gt;, … :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; number_stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;stream::repeat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;| n);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; less_then_twenty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; number_stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;| async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{ i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20 &lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(less_then_twenty.await, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice here that we don’t have to “pin” the &lt;code&gt;less_then_twenty&lt;&#x2F;code&gt; stream, because &lt;code&gt;Unpin&lt;&#x2F;code&gt; is not a requirement for &lt;code&gt;all&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sinks&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#sinks&quot; aria-label=&quot;Anchor link for: sinks&quot;&gt;Sinks&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;dual-of-streams&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#dual-of-streams&quot; aria-label=&quot;Anchor link for: dual-of-streams&quot;&gt;Dual of streams&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Up until now we have only seen detailed usage of the &lt;code&gt;Stream&lt;&#x2F;code&gt; trait. But the opposite of a stream, a “sink”, is also shipped by the &lt;code&gt;futures&lt;&#x2F;code&gt; crate as the &lt;code&gt;Sink&lt;&#x2F;code&gt; trait. A &lt;code&gt;Sink&lt;&#x2F;code&gt; is &lt;strong&gt;something that receives data, agnostic from the transport&lt;&#x2F;strong&gt; or channel used.&lt;&#x2F;p&gt;
&lt;p&gt;The different life-cycle stages of a &lt;code&gt;Sink&lt;&#x2F;code&gt; can be summarized as follows:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;stage&lt;&#x2F;th&gt;&lt;th&gt;name&lt;&#x2F;th&gt;&lt;th&gt;method&lt;&#x2F;th&gt;&lt;th&gt;meaning&lt;&#x2F;th&gt;&lt;th&gt;remark&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;creation&lt;&#x2F;td&gt;&lt;td&gt;new&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;Initial state&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;send&lt;&#x2F;td&gt;&lt;td&gt;ready&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;ready().await&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Wait until cache ready&lt;&#x2F;td&gt;&lt;td&gt;may be full&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;send&lt;&#x2F;td&gt;&lt;td&gt;start send&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;start_send(item)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Load into cache&lt;&#x2F;td&gt;&lt;td&gt;not actual send&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;send&lt;&#x2F;td&gt;&lt;td&gt;flush&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;flush().await&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Send items from cache&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;close&lt;&#x2F;td&gt;&lt;td&gt;close&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;close().await&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Close the &lt;code&gt;Sink&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;not automatic&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The analogue of the map function for streams &lt;code&gt;StreamExt::map&lt;&#x2F;code&gt; for &lt;code&gt;Sink&lt;&#x2F;code&gt;s is the sink operator &lt;code&gt;SinkExt::with&lt;&#x2F;code&gt;. Instead mapping the output items of a stream, it applies a mapping function to all items that are going to be flushed into the sink.&lt;&#x2F;p&gt;
&lt;p&gt;If a &lt;code&gt;Sink&lt;&#x2F;code&gt; becomes full easily and you depend on the concrete underlying type (such as for example a sink derived from a particular type of sender of a Tokio channel), you can allocate an extra buffer with &lt;code&gt;StreamExt::buffer()&lt;&#x2F;code&gt; to cache elements that don’s fit in the sink.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Remark: The &lt;code&gt;Sink&lt;&#x2F;code&gt; trait is not as common as the &lt;code&gt;Stream&lt;&#x2F;code&gt; trait in the crates that I have used. It is, however, very easy to implement yourself.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;flushing-a-stream-into-a-sink&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#flushing-a-stream-into-a-sink&quot; aria-label=&quot;Anchor link for: flushing-a-stream-into-a-sink&quot;&gt;Flushing a &lt;code&gt;Stream&lt;&#x2F;code&gt; into a &lt;code&gt;Sink&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A &lt;code&gt;Sink&lt;&#x2F;code&gt; may appear in combination with a &lt;code&gt;Stream&lt;&#x2F;code&gt;. In that case, it is possible to create a fully functional pipeline that takes a stream and flushes it into a sink. This is done with the &lt;code&gt;forward&lt;&#x2F;code&gt; method of the &lt;code&gt;Sink&lt;&#x2F;code&gt; trait.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(output,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;channel::new();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;PollSender::new(output);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;stream::repeat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;forward&lt;&#x2F;span&gt;&lt;span&gt;(output).await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Important:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StreamExt::forward&lt;&#x2F;code&gt; takes a &lt;code&gt;TryStream&lt;&#x2F;code&gt; (items are &lt;code&gt;Result&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;returns future of &lt;code&gt;Result&lt;&#x2F;code&gt; (need to ignore error).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;more-sink-operators&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#more-sink-operators&quot; aria-label=&quot;Anchor link for: more-sink-operators&quot;&gt;More &lt;code&gt;Sink&lt;&#x2F;code&gt; operators&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;forward&lt;&#x2F;code&gt; method will also close the &lt;code&gt;Sink&lt;&#x2F;code&gt; upon termination of the input stream. If you don’t want to close the &lt;code&gt;Sink&lt;&#x2F;code&gt; after stream returned &lt;code&gt;None&lt;&#x2F;code&gt;, use the sink operator &lt;code&gt;SinkExt::send_all&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;When you have one input stream and know &lt;code&gt;n&lt;&#x2F;code&gt; output sinks &lt;strong&gt;at compile-time&lt;&#x2F;strong&gt;, you can use &lt;code&gt;StreamExt::fanout&lt;&#x2F;code&gt;. Otherwise you will need a mechanism to &lt;code&gt;Clone&lt;&#x2F;code&gt; the input stream at run-time.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;splitting-streams&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#splitting-streams&quot; aria-label=&quot;Anchor link for: splitting-streams&quot;&gt;Splitting streams&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;collapsing-an-iterable-of-streams&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#collapsing-an-iterable-of-streams&quot; aria-label=&quot;Anchor link for: collapsing-an-iterable-of-streams&quot;&gt;Collapsing an iterable of streams&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Given an iterable of streams, you can collapse the whole iterable into one stream with &lt;code&gt;select_all&lt;&#x2F;code&gt;. This function will just emit the stream items from all the streams (assuming the iterator is finite) as they arrive.&lt;&#x2F;p&gt;
&lt;p&gt;A simple example would look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stream_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;stream::repeat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stream_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;stream::repeat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; merged &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;stream::select_all([stream_a, stream_b]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In practice, you would typically pass large vectors, compile-time-sized arrays or other iterable collections to the &lt;code&gt;select_all&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;filtering-streams-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#filtering-streams-1&quot; aria-label=&quot;Anchor link for: filtering-streams-1&quot;&gt;Filtering streams&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You can filter a stream of numbers to only keep the even numbers as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::future::ready;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;futures::{stream, StreamExt};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;stream::iter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; events &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ready&lt;&#x2F;span&gt;&lt;span&gt;(x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice the &lt;code&gt;ready&lt;&#x2F;code&gt; function. This function maps primitive Rust values &lt;strong&gt;into the async world&lt;&#x2F;strong&gt;. The output of &lt;code&gt;ready&lt;&#x2F;code&gt; is a minimal &lt;code&gt;Future&lt;&#x2F;code&gt; that can be moved: it is &lt;strong&gt;&lt;code&gt;Unpin&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Remark&lt;&#x2F;strong&gt;: Don’t try to implement &lt;code&gt;ready&lt;&#x2F;code&gt; yourself, just import it from &lt;code&gt;std::future::ready&lt;&#x2F;code&gt;.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;boolean-operators-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#boolean-operators-1&quot; aria-label=&quot;Anchor link for: boolean-operators-1&quot;&gt;Boolean operators&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;futures&lt;&#x2F;code&gt; crate also provides analogues for the boolean operators shipped with the standard library &lt;code&gt;Iterator&lt;&#x2F;code&gt; such as &lt;code&gt;any&lt;&#x2F;code&gt;, &lt;code&gt;all&lt;&#x2F;code&gt;, … :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; number_stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;stream::repeat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;| n);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; less_then_twenty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; number_stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;| async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{ i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;20 &lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(less_then_twenty.await, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice here that we don’t have to “pin” the &lt;code&gt;less_then_twenty&lt;&#x2F;code&gt; stream, because &lt;code&gt;Unpin&lt;&#x2F;code&gt; is not a requirement for &lt;code&gt;all&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
