# Conditional types

See <https://www.typescriptlang.org/docs/handbook/2/conditional-types.html>.

Dependent types are an advanced feature of programming languages, usually only found in languages like [Agda](../../agda)

Dependent typing exists also in more mainstream languages. One kind of dependent typing is conditional typing in TypeScript. Conditional types are the alternative to if then else for types. However, they still are types that only exist at run-time. If you need to run the program first, before you know some information, you cannot model it with conditional types. Conditional types need to be provided enough information before they can function as if then expressions for types.

## Stronger alternatives

TypeScript's conditional types are reminiscent of dependent typing because a type choice is made based on another type (although not on runtime values).

Agda and Coq have more sophisticated forms of dependent types, where the type can depend on specific values. In these systems, you could express constraints such as "an array of exactly `n` elements," with `n` being a compile-time constant or even a value computed at runtime, something not possible with TypeScript's static type system. See [dependent types](../../agda/02-dependent/).
