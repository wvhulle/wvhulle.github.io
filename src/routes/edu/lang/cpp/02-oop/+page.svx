# Object-oriented programming in C++

Below is an example of a C++ class with a constructor.

```cpp
#include <string>
#include <ostream>
#include <iostream>

class Car {
private:
    std::string make;
    std::string model;
    int year;

public:
    // Constructor with an initializer list to initialize the data members
    Car(const std::string& make, const std::string& model, int year)
        : make(make), model(model), year(year) {
    }

    // Example method to display car information
    void displayInfo() const {
       std::cout << "Make: " << make << ", Model: " << model << ", Year: " << year << std::endl;
    }
};
```

This class, `Car`, has a constructor that initializes the car's make, model, and year.
In the constructor of the `Car` class, an initializer list is used:

```cpp
Car(const std::string& make, const std::string& model, int year)
    : make(make), model(model), year(year) {
}
```

The line `: make(make), model(model), year(year)` uses an initializer list to initialize the member variables of the class with the values passed to the constructor. This is a common practice in C++ for several reasons, including efficiency and clarity.

Here's what's happening:

- `make(make)` initializes the member variable `make` with the value of the constructor parameter `make`.
- `model(model)` initializes the member variable `model` with the value of the constructor parameter `model`.
- `year(year)` initializes the member variable `year` with the value of the constructor parameter `year`.

In this context, the names within the parentheses refer to the parameters passed to the constructor, while the names before the parentheses refer to the class's member variables. Since they have the same name, we can distinguish between them because the context of an initializer list clearly indicates that the left-hand side of each initialization refers to the class members.




```cpp
// The usage of the constructor would be like this:
int main() {
    Car myCar("Toyota", "Corolla", 2020);
    myCar.displayInfo();
    return 0;
}
```

In the `main` function, we create an object of `Car` called `myCar`. The constructor for `Car` is called with the arguments `"Toyota"`, `"Corolla"`, and `2020` to initialize the `make`, `model`, and `year` of the car, respectively. 



