# Pointers in C++

Work in progress.

See

- <https://www.amazon.com.be/-/en/Josh-Lospinoso/dp/1593278888>
- [references in Rust](../../rs/05-references/)

## References vs pointers

References are compile-time aliases for variables. Pointers are run-time addresses to data. Both are necessary for self-referencing data-structures.

C has both but does not have the exclusive borrowing constraints for references as in Rust. There may be mutable and immutable references at the same time to some data in C.

## Null pointer

In most mainstream programming languages, there is a **null pointer**. This is a stand-in value for anything missing, and can be assigned to any pointer.

However, it can lead to a lot of problems. In C++, the problems arising from using the null pointer are all undefined behavior, which means that anything could happen.

```cpp
#include <cstddef>

struct Foo {
  int val;
};
    
int main()  {
    Foo* foo = NULL; 
    // set to null pointer
    foo->val = 44; 
    // set val of foo to 44
    return 0;
}
```

In this example, the null pointer `NULL` is assigned and later a field of this object is accessed. However, since it is null, it does not point to a valid `Foo` object. This will result in a run-time failure:

> Address boundary error
